<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gitee实现图床</title>
    <url>/2021/09/10/Gitee%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>理论上，任何一个可以上传图片，且可以查看上传图片的网站，都可以作为图床</p>

</blockquote>

<p>网上有很多文章讲如何用Gitee作为图床，但基本都是通过PicGo这个应用实现，其实不用PicGo，也是可以实现用Gitee做图床。本文就是讲下在不使用PicGo和它的插件下，如何实现用Gitee做图床。</p>
<span id="more"></span>



<p>下方操作的前提</p>
<ul>
<li>了解简单的Git操作<font style="color: #ccc;">(如果不了解的话可以先到B站看个视频学习下哈)</font></li>
<li>注册了Gitee账号</li>
</ul>
<h3 id="1-Gitee创建仓库"><a href="#1-Gitee创建仓库" class="headerlink" title="1.Gitee创建仓库"></a>1.Gitee创建仓库</h3><p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>如上图，点击新建仓库</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<h5 id="仓库名称"><a href="#仓库名称" class="headerlink" title="仓库名称"></a>仓库名称</h5><p>随便填，这里演示我填写<code>blog.imgs</code>。路径会自动填充，保持跟仓库名称相同</p>
<h5 id="开源-OR-私有"><a href="#开源-OR-私有" class="headerlink" title="开源 OR 私有"></a>开源 OR 私有</h5><p>选择开源<font style="color: #ccc;">(如果选择私有的话，别人就看不到你的图片了)</font></p>
<h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><p><code>选择语言</code>，我选了HTML，其实选择那种语言是无所谓的，毕竟我们存放的是图片，并不是代码</p>
<p><code>添加.gitignore</code>，我的电脑是Mac，所以选择了macOS。Mac在每个文件夹下自动生成<code>.DS_Store</code>文件，这个我不想传到Gitee仓库去</p>
<p><code>添加开源许可证</code>，这个也是随意选，这里我选了GPL-2.0</p>
<p>点击创建</p>
<h3 id="2-Push图片到Gitee仓库"><a href="#2-Push图片到Gitee仓库" class="headerlink" title="2.Push图片到Gitee仓库"></a>2.Push图片到Gitee仓库</h3><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p>克隆仓库到自己电脑。仓库地址如截图</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>使用git命令clone到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:creasylai19/blog.imgs.git</span><br></pre></td></tr></table></figure>

<h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>把需要上传的图片复制到刚才创建的目录<code>blog.imgs</code>，再把文件push到Gitee仓库中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把变更的文件放到暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">#把暂存区的文件提交到本地仓库</span><br><span class="line">git commit -m &quot;提交图片&quot;</span><br><span class="line"></span><br><span class="line">#把本地仓库的提交推送到Gitee仓库中</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>推送完之后，Gitee仓库就有了我们刚上传的图片了</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>这里，我把图片放到了20210910/article1/目录下</p>
<p>后续如果要添加其他图片，则重复<a href="https://lilongsheng.tech/2021/09/10/Gitee%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/#%E6%AD%A5%E9%AA%A4%E4%BA%8C">步骤二</a>即可</p>
<h3 id="3-获取图片地址"><a href="#3-获取图片地址" class="headerlink" title="3.获取图片地址"></a>3.获取图片地址</h3><p>点击Gitee仓库中任意一张图片，如下图，浏览器上方显示的地址是</p>
<p><code>https://gitee.com/creasylai19/blog.imgs/blob/master/20210910/article1/01.png</code></p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/05.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/05.png"></p>
<p>则图片的实际地址是</p>
<p><code>https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png</code></p>
<p>即把上方地址的blob换成raw。得到这个地址则可以用到Markdown文档中</p>
<p><img src="https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png" alt="https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png"></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>十分钟学习一个日常定位bug技巧之Arthas工具</title>
    <url>/2021/09/06/%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%97%A5%E5%B8%B8%E5%AE%9A%E4%BD%8Dbug%E6%8A%80%E5%B7%A7%E4%B9%8BArthas%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote class="blockquote-center-cus">
<div style="text-align:center;">你独处的能力，决定了你的人生高度</div><div style="text-align:center">你定位BUG的能力，决定了你的薪资高度</div><div style="text-align:right;padding-right:20px;">-收录于《胡说八道全集》    </div>
</blockquote>


<p>平常编码工作中，我们会常遇到如下场景：本地运行没问题，但测试环境就是运行异常，棘手的是，看日志一切都是正常的。</p>
<p>遇到这种情况，常见的做法是到测试环境把class文件拉回本地反编译，比对测试环境代码是否部署有问题。</p>
<p>如果代码没问题，则添加打印参数的日志，再重新部署，再复现。这种方法可以解决问题，但一系列的操作，还是太费时间。</p>
<p>这里介绍一个工具<code>Arthas</code>，它可以直接在运行中的服务把JVM中的class字节码反编译，修改反编译后的代码，再直接重新发布到JVM中，整个过程，不用重启服务。</p>
<span id="more"></span>

<p>下面介绍整个过程，目录如下：</p>
<ol>
<li>运行Arthas</li>
<li>反编译class字节码</li>
<li>修改代码</li>
<li>发布到JVM</li>
</ol>
<p>以Arthas官网的Demo为例：</p>
<p>下载Arthas：<a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p>
<p>运行Demo程序，<code>java -jar math-game.jar</code>。这是一个每隔一秒通过Random获取随机数，然后做质因数分解，并打印出分解结果的小程序</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/01.png"></p>
<p>运行Arthas，<code>java -jar arthas-boot.jar</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/02.png"></p>
<p>运行后，arthas会打印出当前所有的Java进程，根据中括号中的ID选择要处理的进程。如，输入1，然后按ENTER</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/03.png"></p>
<p>这时候，arthas已经attach上前面运行的math-game程序。main_class也显示了该程序的主类</p>
<p>我们以这个demo.MathGame为例，反编译它<code>jad demo.MathGame</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/04.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/04.png"></p>
<p>如上图，可见反编译后的main函数为一个死循环，每隔一秒运行一次run函数。</p>
<p>我们把反编译后的代码存到本地<code>jad demo.MathGame --source-only --lineNumber false &gt; MathGame.java</code>，这样，在运行arthas的目录下就生成了MathGame.java文件。</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/05.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/05.png"></p>
<p>我们编辑它，在它run函数中加一个打印语句<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/06.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/06.png"></p>
<p>加了代码后，我们可以自己用javac工具编译，也可以用arthas提供mc(Memory Compiler/内存编译器)工具编译</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/07.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/07.png"></p>
<p>如上，编译得到MathGame.class字节码文件，下面则是通过arthas的redefine命令发布到JVM中</p>
<p>发布前，我们再次确认，当前MathGame运行的结果是</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/08.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/08.png"></p>
<p>没有执行我们加入的代码<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p>执行<code>redefine /Users/creasylai/program/arthas-bin/demo/MathGame.class</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/09.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/09.png"></p>
<p>再观察MathGame运行的结果 </p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/10.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/10.png"></p>
<p>这时候，我们加入的代码就已经执行了。</p>
<hr>
<p>其他：</p>
<ol>
<li><p>其实arthas提供了watch命令，可以直接观察方法执行的入参、返回值等，在上方的场景，我们没必要加打印语句了</p>
<p>执行命令<code>watch demo.MathGame primeFactors &quot;&#123;params,returnObj&#125;&quot; -x 2&quot;</code></p>
</li>
</ol>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/11.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/11.png"></p>
<p>如上图，入参和返回值都打印出来了(返回值为null是因为p rimeFactors方法抛出异常了)</p>
<ol start="2">
<li>arthas还有很多有用的命令，如trace可以追踪每个函数的执行耗时，dashboard可以查看程序的运行状态等</li>
</ol>
<p>下方链接为arthas在线教程</p>
<p>基础教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics</a></p>
<p>进阶教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced</a></p>
<p>参考文档：<a href="https://arthas.aliyun.com/zh-cn/">https://arthas.aliyun.com/zh-cn/</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Bug</tag>
        <tag>Arthas</tag>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
