<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>十分钟学习一个日常定位bug技巧之Arthas工具</title>
    <url>/2021/09/06/%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%97%A5%E5%B8%B8%E5%AE%9A%E4%BD%8Dbug%E6%8A%80%E5%B7%A7%E4%B9%8BArthas%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>平常编码工作中，我们会常遇到如下场景：本地运行没问题，但测试环境就是运行异常，棘手的是，看日志一切都是正常的。</p>
<p>遇到这种情况，常见的做法是到测试环境把class文件拉回本地反编译，比对测试环境代码是否部署有问题。</p>
<p>如果代码没问题，则添加打印参数的日志，再重新部署，再复现。这种方法可以解决问题，但一系列的操作，还是太费时间。</p>
<p>这里介绍一个工具<code>Arthas</code>，它可以直接在运行中的服务把JVM中的class字节码反编译，修改反编译后的代码，再直接重新发布到JVM中，整个过程，不用重启服务。</p>
<span id="more"></span>

<p>下面介绍整个过程，目录如下：</p>
<ol>
<li>运行Arthas</li>
<li>反编译class字节码</li>
<li>修改代码</li>
<li>发布到JVM</li>
</ol>
<p>以Arthas官网的Demo为例：</p>
<p>下载Arthas：<a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p>
<p>运行Demo程序，<code>java -jar math-game.jar</code>。这是一个每隔一秒通过Random获取随机数，然后做质因数分解，并打印出分解结果的小程序</p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/01.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/01.png"></p>
<p>运行Arthas，<code>java -jar arthas-boot.jar</code></p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/02.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/02.png"></p>
<p>运行后，arthas会打印出当前所有的Java进程，根据中括号中的ID选择要处理的进程。如，输入1，然后按ENTER</p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/03.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/03.png"></p>
<p>这时候，arthas已经attach上前面运行的math-game程序。main_class也显示了该程序的主类</p>
<p>我们以这个demo.MathGame为例，反编译它<code>jad demo.MathGame</code></p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/04.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/04.png"></p>
<p>如上图，可见反编译后的main函数为一个死循环，每隔一秒运行一次run函数。</p>
<p>我们把反编译后的代码存到本地<code>jad demo.MathGame --source-only --lineNumber false &gt; MathGame.java</code>，这样，在运行arthas的目录下就生成了MathGame.java文件。</p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/05.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/05.png"></p>
<p>我们编辑它，在它run函数中加一个打印语句<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/06.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/06.png"></p>
<p>加了代码后，我们可以自己用javac工具编译，也可以用arthas提供mc(Memory Compiler/内存编译器)工具编译</p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/07.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/07.png"></p>
<p>如上，编译得到MathGame.class字节码文件，下面则是通过arthas的redefine命令发布到JVM中</p>
<p>发布前，我们再次确认，当前MathGame运行的结果是</p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/08.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/08.png"></p>
<p>没有执行我们加入的代码<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p>执行<code>redefine /Users/creasylai/program/arthas-bin/demo/MathGame.class</code></p>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/09.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/09.png"></p>
<p>再观察MathGame运行的结果 </p>
<p><img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/10.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/10.png"></p>
<p>这时候，我们加入的代码就已经执行了。</p>
<hr>
<p>其他：</p>
<ol>
<li><p>其实arthas提供了watch命令，可以直接观察方法执行的入参、返回值等，在上方的场景，我们没必要加打印语句了</p>
<p>执行命令<code>watch demo.MathGame primeFactors &quot;&#123;params,returnObj&#125;&quot; -x 2&quot;</code></p>
</li>
</ol>
<p> <img src="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/11.png" alt="https://raw.githubusercontent.com/creasylai19/creasylai19.blog.images/main/20210906/article1/11.png"></p>
<p>如上图，入参和返回值都打印出来了(返回值为null是因为p rimeFactors方法抛出异常了)</p>
<ol start="2">
<li>arthas还有很多有用的命令，如trace可以追踪每个函数的执行耗时，dashboard可以查看程序的运行状态等</li>
</ol>
<p>下方链接为arthas在线教程</p>
<p>基础教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics</a></p>
<p>进阶教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced</a></p>
<p>参考文档：<a href="https://arthas.aliyun.com/zh-cn/">https://arthas.aliyun.com/zh-cn/</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Bug</tag>
        <tag>Arthas</tag>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
