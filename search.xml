<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gitee实现图床</title>
    <url>/2021/09/10/Gitee%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>理论上，任何一个可以上传图片，且可以查看上传图片的网站，都可以作为图床</p>

</blockquote>

<p>网上有很多文章讲如何用Gitee作为图床，但基本都是通过PicGo这个应用实现，其实不用PicGo，也是可以实现用Gitee做图床。本文就是讲下在不使用PicGo和它的插件下，如何实现用Gitee做图床。</p>
<span id="more"></span>



<p>下方操作的前提</p>
<ul>
<li>了解简单的Git操作<font style="color: #ccc;">(如果不了解的话可以先到B站看个视频学习下哈)</font></li>
<li>注册了Gitee账号</li>
</ul>
<h3 id="1-Gitee创建仓库"><a href="#1-Gitee创建仓库" class="headerlink" title="1.Gitee创建仓库"></a>1.Gitee创建仓库</h3><p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>如上图，点击新建仓库</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<h5 id="仓库名称"><a href="#仓库名称" class="headerlink" title="仓库名称"></a>仓库名称</h5><p>随便填，这里演示我填写<code>blog.imgs</code>。路径会自动填充，保持跟仓库名称相同</p>
<h5 id="开源-OR-私有"><a href="#开源-OR-私有" class="headerlink" title="开源 OR 私有"></a>开源 OR 私有</h5><p>选择开源<font style="color: #ccc;">(如果选择私有的话，别人就看不到你的图片了)</font></p>
<h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><p><code>选择语言</code>，我选了HTML，其实选择那种语言是无所谓的，毕竟我们存放的是图片，并不是代码</p>
<p><code>添加.gitignore</code>，我的电脑是Mac，所以选择了macOS。Mac在每个文件夹下自动生成<code>.DS_Store</code>文件，这个我不想传到Gitee仓库去</p>
<p><code>添加开源许可证</code>，这个也是随意选，这里我选了GPL-2.0</p>
<p>点击创建</p>
<h3 id="2-Push图片到Gitee仓库"><a href="#2-Push图片到Gitee仓库" class="headerlink" title="2.Push图片到Gitee仓库"></a>2.Push图片到Gitee仓库</h3><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p>克隆仓库到自己电脑。仓库地址如截图</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>使用git命令clone到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:creasylai19/blog.imgs.git</span><br></pre></td></tr></table></figure>

<h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>把需要上传的图片复制到刚才创建的目录<code>blog.imgs</code>，再把文件push到Gitee仓库中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把变更的文件放到暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">#把暂存区的文件提交到本地仓库</span><br><span class="line">git commit -m &quot;提交图片&quot;</span><br><span class="line"></span><br><span class="line">#把本地仓库的提交推送到Gitee仓库中</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>推送完之后，Gitee仓库就有了我们刚上传的图片了</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>这里，我把图片放到了20210910/article1/目录下</p>
<p>后续如果要添加其他图片，则重复<a href="https://lilongsheng.tech/2021/09/10/Gitee%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/#%E6%AD%A5%E9%AA%A4%E4%BA%8C">步骤二</a>即可</p>
<h3 id="3-获取图片地址"><a href="#3-获取图片地址" class="headerlink" title="3.获取图片地址"></a>3.获取图片地址</h3><p>点击Gitee仓库中任意一张图片，如下图，浏览器上方显示的地址是</p>
<p><code>https://gitee.com/creasylai19/blog.imgs/blob/master/20210910/article1/01.png</code></p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/05.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/05.png"></p>
<p>则图片的实际地址是</p>
<p><code>https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png</code></p>
<p>即把上方地址的blob换成raw。得到这个地址则可以用到Markdown文档中</p>
<p><img src="https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png" alt="https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png"></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode36-有效的数独</title>
    <url>/2021/11/23/LeetCode36/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p>
<ol>
<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li>
</ol>
<span id="more"></span>


<p><strong>注意：</strong></p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
<li>空白格用 <code>&#39;.&#39;</code> 表示。</li>
</ul>
<p><strong>示例 1：</strong></p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article1/01.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：false</span><br><span class="line">解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>board.length == 9</code></li>
<li><code>board[i].length == 9</code></li>
<li><code>board[i][j]</code> 是一位数字（<code>1-9</code>）或者 <code>&#39;.&#39;</code></li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看题目可知，有效的数独是指每行/每列/每个3*3的方格，均无重复元素出现。所以，答题也按这个思路去做即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Boolean&gt;[][] maps = <span class="keyword">new</span> HashMap[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            Map&lt;Character, Boolean&gt; rowMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;Character, Boolean&gt; columnMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[i].length; j++) &#123;</span><br><span class="line">                <span class="comment">//检测行</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    Boolean exists = rowMap.put(board[i][j], <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != exists) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检测列</span></span><br><span class="line">                <span class="keyword">if</span>(board[j][i] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    Boolean exists = columnMap.put(board[j][i], <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != exists) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检测矩阵</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>( <span class="keyword">null</span> == maps[i/<span class="number">3</span>][j/<span class="number">3</span>] )&#123;</span><br><span class="line">                        maps[i/<span class="number">3</span>][j/<span class="number">3</span>] = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Boolean exists = maps[i/<span class="number">3</span>][j/<span class="number">3</span>].put(board[i][j], <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != exists) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rowMap.clear();</span><br><span class="line">            columnMap.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>题目转载自：<a href="https://leetcode-cn.com/problems/valid-sudoku">https://leetcode-cn.com/problems/valid-sudoku</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>十分钟学习一个日常定位bug技巧之Arthas工具</title>
    <url>/2021/09/06/%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%97%A5%E5%B8%B8%E5%AE%9A%E4%BD%8Dbug%E6%8A%80%E5%B7%A7%E4%B9%8BArthas%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote class="blockquote-center-cus">
<div style="text-align:center;">你独处的能力，决定了你的人生高度</div><div style="text-align:center">你定位BUG的能力，决定了你的薪资高度</div><div style="text-align:right;padding-right:20px;">-收录于《胡说八道全集》    </div>
</blockquote>


<p>平常编码工作中，我们会常遇到如下场景：本地运行没问题，但测试环境就是运行异常，棘手的是，看日志一切都是正常的。</p>
<p>遇到这种情况，常见的做法是到测试环境把class文件拉回本地反编译，比对测试环境代码是否部署有问题。</p>
<p>如果代码没问题，则添加打印参数的日志，再重新部署，再复现。这种方法可以解决问题，但一系列的操作，还是太费时间。</p>
<p>这里介绍一个工具<code>Arthas</code>，它可以直接在运行中的服务把JVM中的class字节码反编译，修改反编译后的代码，再直接重新发布到JVM中，整个过程，不用重启服务。</p>
<span id="more"></span>

<p>下面介绍整个过程，目录如下：</p>
<ol>
<li>运行Arthas</li>
<li>反编译class字节码</li>
<li>修改代码</li>
<li>发布到JVM</li>
</ol>
<p>以Arthas官网的Demo为例：</p>
<p>下载Arthas：<a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p>
<p>运行Demo程序，<code>java -jar math-game.jar</code>。这是一个每隔一秒通过Random获取随机数，然后做质因数分解，并打印出分解结果的小程序</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/01.png"></p>
<p>运行Arthas，<code>java -jar arthas-boot.jar</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/02.png"></p>
<p>运行后，arthas会打印出当前所有的Java进程，根据中括号中的ID选择要处理的进程。如，输入1，然后按ENTER</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/03.png"></p>
<p>这时候，arthas已经attach上前面运行的math-game程序。main_class也显示了该程序的主类</p>
<p>我们以这个demo.MathGame为例，反编译它<code>jad demo.MathGame</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/04.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/04.png"></p>
<p>如上图，可见反编译后的main函数为一个死循环，每隔一秒运行一次run函数。</p>
<p>我们把反编译后的代码存到本地<code>jad demo.MathGame --source-only --lineNumber false &gt; MathGame.java</code>，这样，在运行arthas的目录下就生成了MathGame.java文件。</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/05.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/05.png"></p>
<p>我们编辑它，在它run函数中加一个打印语句<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/06.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/06.png"></p>
<p>加了代码后，我们可以自己用javac工具编译，也可以用arthas提供mc(Memory Compiler/内存编译器)工具编译</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/07.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/07.png"></p>
<p>如上，编译得到MathGame.class字节码文件，下面则是通过arthas的redefine命令发布到JVM中</p>
<p>发布前，我们再次确认，当前MathGame运行的结果是</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/08.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/08.png"></p>
<p>没有执行我们加入的代码<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p>执行<code>redefine /Users/creasylai/program/arthas-bin/demo/MathGame.class</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/09.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/09.png"></p>
<p>再观察MathGame运行的结果 </p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/10.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/10.png"></p>
<p>这时候，我们加入的代码就已经执行了。</p>
<hr>
<p>其他：</p>
<ol>
<li><p>其实arthas提供了watch命令，可以直接观察方法执行的入参、返回值等，在上方的场景，我们没必要加打印语句了</p>
<p>执行命令<code>watch demo.MathGame primeFactors &quot;&#123;params,returnObj&#125;&quot; -x 2&quot;</code></p>
</li>
</ol>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/11.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/11.png"></p>
<p>如上图，入参和返回值都打印出来了(返回值为null是因为p rimeFactors方法抛出异常了)</p>
<ol start="2">
<li>arthas还有很多有用的命令，如trace可以追踪每个函数的执行耗时，dashboard可以查看程序的运行状态等</li>
</ol>
<p>下方链接为arthas在线教程</p>
<p>基础教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics</a></p>
<p>进阶教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced</a></p>
<p>参考文档：<a href="https://arthas.aliyun.com/zh-cn/">https://arthas.aliyun.com/zh-cn/</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Bug</tag>
        <tag>Arthas</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>可转债</title>
    <url>/2021/09/14/%E5%8F%AF%E8%BD%AC%E5%80%BA/</url>
    <content><![CDATA[<p>本篇为可转债的入门文章，主要以<a href="https://xueqiu.com/S/SH113050">南银转债(SH:113050)</a>为例，介绍可转债的相关概念。</p>
<span id="more"></span>

<p>首先附上南银转债相关的发行公告(资料来源：<a href="http://www.sse.com.cn/disclosure/listedinfo/announcement/">上海证券交易所</a>)</p>
<ul>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8B%9F%E9%9B%86%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">20210610_南京银行股份有限公司公开发行A股可转换公司债券募集说明书</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8B%9F%E9%9B%86%E8%AF%B4%E6%98%8E%E4%B9%A6%E6%91%98%E8%A6%81.pdf">20210610_南京银行股份有限公司公开发行A股可转换公司债券募集说明书摘要</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E4%BF%A1%E7%94%A8%E8%AF%84%E7%BA%A7%E6%8A%A5%E5%91%8A.pdf">20210610_南京银行股份有限公司公开发行A股可转换公司债券信用评级报告</a></p>
</li>
</ul>
<ul>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8F%91%E8%A1%8C%E5%85%AC%E5%91%8A.pdf">20210610_南京银行股份有限公司公开发行可转换公司债券发行公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210616_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E7%BD%91%E4%B8%8A%E4%B8%AD%E7%AD%BE%E7%8E%87%E5%8F%8A%E7%BD%91%E4%B8%8B%E9%85%8D%E5%94%AE%E7%BB%93%E6%9E%9C%E5%85%AC%E5%91%8A.pdf">20210616_南京银行股份有限公司公开发行可转换公司债券网上中签率及网下配售结果公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210617_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E7%BD%91%E4%B8%8A%E4%B8%AD%E7%AD%BE%E7%BB%93%E6%9E%9C%E5%85%AC%E5%91%8A.pdf">20210617_南京银行股份有限公司公开发行可转换公司债券网上中签结果公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210621_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8F%91%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%85%AC%E5%91%8A.pdf">20210621_南京银行股份有限公司公开发行可转换公司债券发行结果公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210629_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E4%B8%8A%E5%B8%82%E5%85%AC%E5%91%8A%E4%B9%A6.pdf">20210629_南京银行股份有限公司公开发行A股可转换公司债券上市公告书</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210629_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%B3%E4%BA%8E%E7%AD%BE%E7%BD%B2%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8B%9F%E9%9B%86%E8%B5%84%E9%87%91%E4%B8%93%E6%88%B7%E5%AD%98%E5%82%A8%E7%9B%91%E7%AE%A1%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%85%AC%E5%91%8A.pdf">20210629_南京银行股份有限公司关于签署公开发行A股可转换公司债券募集资金专户存储监管协议的公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210703_2021%E5%B9%B4%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E8%B7%9F%E8%B8%AA%E8%AF%84%E7%BA%A7%E6%8A%A5%E5%91%8A.pdf">20210703_2021年南京银行股份有限公司跟踪评级报告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210703_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%B3%E4%BA%8EA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B82021%E5%B9%B4%E8%B7%9F%E8%B8%AA%E8%AF%84%E7%BA%A7%E7%BB%93%E6%9E%9C%E7%9A%84%E5%85%AC%E5%91%8A.pdf">20210703_南京银行股份有限公司关于A股可转换公司债券2021年跟踪评级结果的公告</a></p>
</li>
</ul>
<h3 id="可转债"><a href="#可转债" class="headerlink" title="可转债"></a>可转债</h3><blockquote>
<p><strong>可转换债券</strong>（Convertible Bond，CB），简称<strong>可转债</strong>，又作<strong>可换股债券</strong>，是一种混合债券及<a href="https://zh.wikipedia.org/wiki/%E9%87%91%E8%9E%8D%E8%A1%8D%E7%94%9F%E5%93%81">金融衍生品</a>可按一定规则转换为债券发行公司的<a href="https://zh.wikipedia.org/wiki/%E8%82%A1%E7%A5%A8">股票</a>；其转换价格、转换时间段会在发行前确定。由于附加了认股权证（<a href="https://zh.wikipedia.org/wiki/%E6%9C%9F%E6%9D%83">期权</a>）等多种权益，可转换债券通常<a href="https://zh.wikipedia.org/w/index.php?title=%E7%A5%A8%E9%9D%A2%E5%88%A9%E7%8E%87&action=edit&redlink=1">票面利率</a>较一般企业债券低。从发行者的角度看，用可转换债券融资的主要优势在于可以减少<a href="https://zh.wikipedia.org/wiki/%E5%88%A9%E6%81%AF">利息</a>费用，增加股权融资，降低负债率，但如果债券被转换，公司原股东的股权将被<a href="https://zh.wikipedia.org/w/index.php?title=%E8%82%A1%E6%9D%83%E7%A8%80%E9%87%8A&action=edit&redlink=1">稀释</a>。</p>
</blockquote>
<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h4 id="提高中签概率"><a href="#提高中签概率" class="headerlink" title="提高中签概率"></a>提高中签概率</h4>]]></content>
      <categories>
        <category>投资</category>
      </categories>
      <tags>
        <tag>可转债</tag>
        <tag>理财</tag>
        <tag>低风险</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode423-从英文中重建数字</title>
    <url>/2021/11/24/LeetCode423/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串 <code>s</code> ，其中包含字母顺序打乱的用英文单词表示的若干数字（<code>0-9</code>）。按 <strong>升序</strong> 返回原始的数字。</p>
 <span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;owoztneoer&quot;</span><br><span class="line">输出：&quot;012&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;fviefuro&quot;</span><br><span class="line">输出：&quot;45&quot;</span><br></pre></td></tr></table></figure>



<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 105</li>
<li>s[i] 为 [“e”,”g”,”f”,”i”,”h”,”o”,”n”,”s”,”r”,”u”,”t”,”w”,”v”,”x”,”z”] 这些字符之一</li>
<li>s 保证是一个符合题目要求的字符串</li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看完题目后，大概猜出可能需要每个数字的特定字母做标识，所以干脆列出0-9数字的英文单词观察</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZERO = <span class="string">&quot;zero&quot;</span>;<span class="comment">//Z</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ONE = <span class="string">&quot;one&quot;</span>;<span class="comment">//Z,W,U-&gt;O</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TWO = <span class="string">&quot;two&quot;</span>;<span class="comment">//W</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String THREE = <span class="string">&quot;three&quot;</span>;<span class="comment">//Z,U-&gt;R</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FOUR = <span class="string">&quot;four&quot;</span>;<span class="comment">//U</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIVE = <span class="string">&quot;five&quot;</span>;<span class="comment">//U-&gt;F</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIX = <span class="string">&quot;six&quot;</span>;<span class="comment">//X</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEVEN = <span class="string">&quot;seven&quot;</span>;<span class="comment">//X-&gt;S</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EIGHT = <span class="string">&quot;eight&quot;</span>;<span class="comment">//G</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NINE = <span class="string">&quot;nine&quot;</span>;<span class="comment">//G,X,U-&gt;F-&gt;I</span></span><br></pre></td></tr></table></figure>

<p>如上，观察后得出，可以分三轮，计算出每个数字的出现次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一轮，选出zero,two,four,six,eight</span></span><br><span class="line"><span class="comment">//第二轮，选出one,three,five,seven</span></span><br><span class="line"><span class="comment">//第三轮，选出nine</span></span><br></pre></td></tr></table></figure>

<p>得出方法后，代码就很容易写了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">originalDigits</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先把s做分解，用Map&lt;Character, Integer&gt;做容器</span></span><br><span class="line">        Map&lt;Character, Integer&gt; wordCount = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>( wordCount.containsKey(c) )&#123;</span><br><span class="line">                wordCount.put(c, wordCount.get(c)+<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wordCount.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//第一轮</span></span><br><span class="line">        numCount[<span class="number">0</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;z&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">2</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;w&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">4</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;u&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">6</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;x&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">8</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;g&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//第二轮</span></span><br><span class="line">        numCount[<span class="number">1</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;o&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">0</span>]-numCount[<span class="number">2</span>]-numCount[<span class="number">4</span>];</span><br><span class="line">        numCount[<span class="number">3</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;r&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">0</span>]-numCount[<span class="number">4</span>];</span><br><span class="line">        numCount[<span class="number">5</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;f&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">4</span>];</span><br><span class="line">        numCount[<span class="number">7</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;s&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">6</span>];</span><br><span class="line">        <span class="comment">//第三轮</span></span><br><span class="line">        numCount[<span class="number">9</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;i&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">5</span>]-numCount[<span class="number">6</span>]-numCount[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCount.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numCount[i]; j++) &#123;</span><br><span class="line">                sb.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article2/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article2/01.png"></p>
<p>题目转载自：<a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english">https://leetcode-cn.com/problems/reconstruct-original-digits-from-english</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode38-外观数列</title>
    <url>/2021/12/01/LeetCode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个正整数<code> n</code> ，输出外观数列的第 <code>n</code> 项。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>
<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>
<ul>
<li><p><code>countAndSay(1) = &quot;1&quot;</code></p>
</li>
<li><p><code>countAndSay(n)</code> 是对<code> countAndSay(n-1)</code> 的描述，然后转换成另一个数字字符串。</p>
</li>
</ul>
 <span id="more"></span>

<p>前五项如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">第一项是数字 1 </span><br><span class="line">描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 &quot;11&quot;</span><br><span class="line">描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 &quot;21&quot;</span><br><span class="line">描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 &quot;1211&quot;</span><br><span class="line">描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 &quot;111221&quot;</span><br></pre></td></tr></table></figure>

<p>要 <strong>描述</strong>  一个数字字符串，首先要将字符串分割为 <strong>最小</strong> 数量的组，每个组都由连续的最多 <strong>相同字符</strong> 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p>
<p>例如，数字字符串<code> &quot;3322251&quot;</code> 的描述如下图：</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/00.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/00.png"></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：&quot;1&quot;</span><br><span class="line">解释：这是一个基本样例。</span><br></pre></td></tr></table></figure>


<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：&quot;1211&quot;</span><br><span class="line">解释：</span><br><span class="line">countAndSay(1) = &quot;1&quot;</span><br><span class="line">countAndSay(2) = 读 &quot;1&quot; = 一 个 1 = &quot;11&quot;</span><br><span class="line">countAndSay(3) = 读 &quot;11&quot; = 二 个 1 = &quot;21&quot;</span><br><span class="line">countAndSay(4) = 读 &quot;21&quot; = 一 个 2 + 一 个 1 = &quot;12&quot; + &quot;11&quot; = &quot;1211&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 30</code></li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看完题目后，觉得用顺推的思路比较容易。我们可以依次算出第1个、第2个、第3个…第n-1个外观数列，则第n个外观数列也容易算出</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> loop = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( loop &lt; n )&#123;</span><br><span class="line">            loop++;</span><br><span class="line">            str = getNextStr(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNextStr</span><span class="params">(String input)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> start = input.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( input.charAt(i) != start )&#123;</span><br><span class="line">                sb.append(count);</span><br><span class="line">                sb.append(start);</span><br><span class="line">                start = input.charAt(i);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(count);</span><br><span class="line">        sb.append(start);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/01.png"></p>
<p>题目转载自：<a href="https://leetcode-cn.com/problems/count-and-say">https://leetcode-cn.com/problems/count-and-say</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode807-保持城市天际线</title>
    <url>/2021/12/13/LeetCode807-%E4%BF%9D%E6%8C%81%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一座由 <code>n x n</code> 个街区组成的城市，每个街区都包含一座立方体建筑。给你一个下标从 <strong>0</strong> 开始的 <code>n x n</code> 整数矩阵 <code>grid</code> ，其中 <code>grid[r][c]</code> 表示坐落于 <code>r</code> 行 <code>c</code> 列的建筑物的 <strong>高度</strong> 。</p>
<p>城市的 <strong>天际线</strong> 是从远处观察城市时，所有建筑物形成的外部轮廓。从东、南、西、北四个主要方向观测到的 <strong>天际线</strong> 可能不同。</p>
<p>我们被允许为 <strong>任意数量的建筑物</strong> 的高度增加 <strong>任意增量（不同建筑物的增量可能不同）</strong> 。 高度为 <code>0</code> 的建筑物的高度也可以增加。然而，增加的建筑物高度 <strong>不能影响</strong> 从任何主要方向观察城市得到的 <strong>天际线</strong> 。</p>
<p>在 <strong>不改变</strong> 从任何主要方向观测到的城市 <strong>天际线</strong> 的前提下，返回建筑物可以增加的 <strong>最大高度增量总和</strong> 。</p>
<span id="more"></span>

<p><strong>示例 1：</strong><br><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1213/article01/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1213/article01/01.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</span><br><span class="line">输出：35</span><br><span class="line">解释：建筑物的高度如上图中心所示。</span><br><span class="line">用红色绘制从不同方向观看得到的天际线。</span><br><span class="line">在不影响天际线的情况下，增加建筑物的高度：</span><br><span class="line">gridNew = [ [8, 4, 8, 7],</span><br><span class="line">            [7, 4, 7, 7],</span><br><span class="line">            [9, 4, 8, 7],</span><br><span class="line">            [3, 3, 3, 3] ]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：grid = [[0,0,0],[0,0,0],[0,0,0]]</span><br><span class="line">输出：0</span><br><span class="line">解释：增加任何建筑物的高度都会导致天际线的变化。</span><br></pre></td></tr></table></figure>



<p><strong>提示：</strong></p>
<ul>
<li><code>n == grid.length</code></li>
<li><code>n == grid[r].length</code></li>
<li><code>2 &lt;= n &lt;= 50</code></li>
<li><code>0 &lt;= grid[r][c] &lt;= 100</code></li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看完题目可知，只要建筑物增加的高度不高于其所在行&amp;所在列的最小值，则不会影响天际线。所以，解题也就从计算行列最小值-当前建筑物的高度，则为当前建筑物可增加的高度</p>
<p>代码如下(代码有优化的空间，懒得处理了)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxIncreaseKeepingSkyline</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] rowMax = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length];</span><br><span class="line">        <span class="keyword">int</span>[] colMax = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            rowMax[i] = grid[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>( rowMax[i] &lt; grid[i][j] )&#123;</span><br><span class="line">                    rowMax[i] = grid[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//因为行列是相等的</span></span><br><span class="line">            colMax[i] = grid[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>( colMax[i] &lt; grid[j][i] )&#123;</span><br><span class="line">                    colMax[i] = grid[j][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(rowMax));</span></span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(colMax));</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">                sum += Math.min(rowMax[i], colMax[j]) - grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>题目转载自：<a href="https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline">https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>科学备孕_女生</title>
    <url>/2022/01/23/%E7%A7%91%E5%AD%A6%E5%A4%87%E5%AD%95-%E5%A5%B3%E7%94%9F/</url>
    <content><![CDATA[<blockquote>
<p>本文摘自丁香妈妈<a href="https://book.douban.com/subject/35689769/">《科学怀孕指南》</a></p>
</blockquote>
<h4 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h4><p>BMI控制在18.5～23.9之间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BMI计算为:</span><br><span class="line">BMI = 体重/(身高*身高)</span><br><span class="line">例如，身高为1.6M，体重是50KG，则BMI为19.5</span><br></pre></td></tr></table></figure>

<ul>
<li>体重过瘦：</li>
</ul>
<p>每天1～2次加餐。如每日增加200ML牛奶，或50G谷类，或50G肉类，或75G鸡蛋，或75G鱼类  </p>
<ul>
<li>体重过胖：</li>
</ul>
<p>多吃蔬菜，少高糖，少重油食物。减慢进食速度，每餐七八分饱。增加运动量，每日30～90分钟中等强度运动，如快走、慢跑、游泳、跳绳等</p>
<span id="more"></span>


<h4 id="叶酸"><a href="#叶酸" class="headerlink" title="叶酸"></a>叶酸</h4><p>叶酸是一种B族维生素，对胚胎细胞的增殖、分化及神经系统的发育有重要作用。补充叶酸可以降低胎儿畸形发育概率</p>
<p>胎儿神经管在怀孕最初的4周形成。准妈妈应该每天补充400μg叶酸持续12～14周，这时血浆中叶酸浓度才能达到预防神经管畸形水平，所以一般提前3个月就开始补充叶酸。另外，服用到怀孕后3个月，待胎儿神经发育完善。长期服用安全剂量的叶酸对身体也无害，可以考虑整个孕期都服用</p>
<p>叶酸的安全剂量是每日1000μg以下，一般每日饮食摄入的是200μg左右，所以大概每日补充400μg即可</p>
<p>其他元素的补充：铁(造血)、碘(甲状腺素，缺少易引起宝宝智力发育)、DHA，可通过铁剂、碘盐、鱼肉、鸡蛋、海鱼等补充</p>
<h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>拉伸柔韧性+中等强度运动+力量训练</p>
<ul>
<li><p>拉伸柔韧性：推荐瑜伽、普拉提，预防孕期脊柱和盆骨处的疼痛</p>
</li>
<li><p>中等强度运动：快走、骑车、跳舞、有氧操、游泳、跳绳</p>
</li>
<li><p>力量训练：练胸、背、腿。可以考虑健身房或者家中做深蹲、跪姿俯卧撑等</p>
</li>
</ul>
<p>运动要达到对应强度，稍微有点累、出点汗才能有效果</p>
<h4 id="用药及疫苗接种"><a href="#用药及疫苗接种" class="headerlink" title="用药及疫苗接种"></a>用药及疫苗接种</h4><p>大部分药会在停药后1个月内被身体代谢掉，不会影响备孕。但有些药物需要在停药3个月后，甚至6个月后再备孕，如治疗痤疮的维A酸乳膏、阿达帕林凝胶、口服易维A酸等</p>
<p>风疹疫苗、水痘疫苗需要在孕前接种(可以到医院抽血检查IgG)，然后等1～3个月再准备怀孕</p>
<p>HPV疫苗需要打3针，最少需要6个月，待全部注射了再开始备孕。接种过程中发现怀孕了，可以先停止接种，产后再继续</p>
<p>流感疫苗、乙肝疫苗、破伤风疫苗、狂犬病疫苗等，不需要推迟备孕</p>
<h4 id="孕前检查"><a href="#孕前检查" class="headerlink" title="孕前检查"></a>孕前检查</h4><p>计划怀孕前3～6个月做全面的健康检查。检查报告出来后，最好找医生咨询指导备孕及注意事项</p>
<h4 id="提高受孕概率"><a href="#提高受孕概率" class="headerlink" title="提高受孕概率"></a>提高受孕概率</h4><ul>
<li>积极尝试：每周保证2～3次性生活</li>
<li>抓住排卵时机：使用排卵试纸，在月经干净后每天测一次。呈现弱阳性时(即两条红线)，可以增加到每天测试2～3次，强阳性时是最佳的受孕时机</li>
</ul>
<p>在这里有<a href="https://baike.baidu.com/item/%E6%8E%92%E5%8D%B5%E6%9C%9F/235574">排卵期</a>和<a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E6%9C%9F">安全期</a>的解释，经期周期准确的话，图示如下</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/0123/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/0123/article1/01.png"></p>
]]></content>
      <categories>
        <category>孕育</category>
      </categories>
      <tags>
        <tag>备孕</tag>
      </tags>
  </entry>
  <entry>
    <title>如何带新人</title>
    <url>/2022/02/17/%E5%A6%82%E4%BD%95%E5%B8%A6%E6%96%B0%E4%BA%BA/</url>
    <content><![CDATA[<p>这是一篇写于2017年的博客，发表在QQ空间。觉得还是有参考意义，所以再次Copy到这个博客中</p>
<hr>
<p><strong>为什么我要带新人？</strong><br>其实我也没有搞懂这个问题。和面试一样，既不属于KPI考核，带的过程花自己不少时间精力，还有老生常谈的教出徒弟饿死师傅。完全就是一个吃力不讨好的工作。但，对于我本人来说，既然是上级安排的任务，我就不得不做。而要做，我就想把它做好。不能接受后，不愿意做，然后应付了事。被上级、其他同事、新人所鄙视，不符合我的价值观。另外，教出徒弟饿死师傅的事情，我觉得本质上还是因为师父做得不够。一代总比一代强，个人无法对抗这种趋势，并不存在师父不教徒弟，徒弟就永远不会超越师父的定律，要想不被淘汰，总归还是打铁需要自身硬</p>
<p><strong>带新人的目的是什么？</strong><br>公司招人的目的是为了分担老员工的任务(原有任务或者即将要新增的任务)，至少在基层是这样。那带新人的目的就可以简单的说成：<code>让新人在短时间内能够胜任岗位要求，并且持久的为公司产生效益</code>。抽取出关键词，短时间内胜任、持久，我们暂且先谈这两点吧，怎么做到这些</p>
<span id="more"></span>


<p><strong>带新人关键词-短时间内胜任</strong></p>
<p>想象一下我们要参加一门入学考试，现在时间很紧，我们知道要考的几门课程，要想提高概率通过这门考试，我们应该怎么做呢？</p>
<p>上学的时候我们很熟悉解上面这道题的方法。1.划重点 2.多看几遍重点知识 3.多做几遍模拟考试。</p>
<p>把这个方法套到我们带新人的任务上，也就是1.整理新人必知技能 2.让新人了解掌握这些基础技能知识 3.安排任务作为测试。另外，上面那道题其实还隐藏着一个重要信息，deadline。deadline对于我们培养新人的提示就是对新人进行周期性检查。</p>
<p>再具体到我所在的行业岗位，可以细化到如下任务：</p>
<p>整理新人必知技能：包括技术基础、项目架构、公司用到中的工具、具体后续新人要涉及的一个模块，技术基础如git/javascript/react native，项目架构即整个项目的构成，主要包括网络访问模块/图片获取模块/公司自身研发的跳转模块等，公司用到的工具如bug系统/构建打包测试/gitlab/Code Review平台等，具体模块如产品交互/模块设计/接口等</p>
<p>让新人了解掌握这些基础技能知识：方法可以有1.讲解，2.让新人自行阅读文档代码。一般这个阶段，新人会有很多问题，可以让新人把问题整理成wiki，后续新人可以用得着<code>[需要维护这个wiki，不然wiki就是垃圾]</code></p>
<p>安排任务作为测试：循序渐进的安排任务。最佳的学习方式就是<code>理论与实践</code>同时进行！新人在学习一段时间后，往往都有一个疲惫期，期望能做点实事，以寻求所学知识的巩固与肯定。像我平时的话会安排一些bug，或者一些平时没时间做但可以进行优化的功能点。这个阶段需要跟进，看新人做得怎样，有遇到哪些困哪，是否可以克服，是否需要帮助</p>
<p>周期性检查：以周或者双周为单位，总结新人在前一个阶段工作成绩、做得好、做得不足之处以及改进方法、下一阶段计划等。主要检查新人的工作状态，意愿和能力是否合适工作，如何改进。</p>
<p><strong>带新人关键词-持久</strong><br>这个点其实会涉及企业愿景、员工职业规划、公司激励手段等这些大部头，但本文只是简单的从新人期这个点着手。所以这里简单说说。做技术的同事，一般都比较腼腆，很少有与新人交流很多，新人一般也比较少主动找不同的同事聊工作，这种情况就需要导师多与新人交流，肯定鼓励。后期可以减少频率，但前期还是需要导师帮助新人渡过这个熟悉期。邮件介绍、团队欢迎介绍、聚餐，让新人对人事环境有个大概了解，这是必不可少的</p>
<p><strong>其他</strong><br>我很喜欢PDCA戴明环，这是一个螺旋上升的方法论，不拘泥于当前，不忘过去，回顾复盘发现解决问题，引出更好的带人方法</p>
<p>以上分了两次写，第一次是5月7号，本来想系统的写一下带新人的方方面面，但现在也没精力了，删了几个点，就此吧，后续有机会再补上。这两个月公司发生很多事情，我自己要变动，带的一个实习生也离开了，诶，我面壁思过去了</p>
]]></content>
      <categories>
        <category>管理</category>
      </categories>
      <tags>
        <tag>带人</tag>
        <tag>管理者</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode224-基本计算器</title>
    <url>/2022/02/17/LeetCode224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p>
<p>注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval() </code>。</p>
 <span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;1 + 1&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot; 2-1 + 2 &quot;</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(1+(4+5+2)-3)+(6+8)&quot;</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure>




<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 3 * 105</li>
<li>s 由数字、’+’、’-‘、’(‘、’)’、和 ‘ ‘ 组成</li>
<li>s 表示一个有效的表达式</li>
<li>‘+’ 不能用作一元运算(例如， “+1” 和 “+(2 + 3)” 无效)</li>
<li>‘-‘ 可以用作一元运算(即 “-1” 和 “-(2 + 3)” 是有效的)</li>
<li>输入中不存在两个连续的操作符</li>
<li>每个数字和运行的计算将适合于一个有符号的 32位 整数</li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>因为以前大学的时候曾经学习过使用两个栈做表达式运算，所以看完题目后，便顺着这个思路解题</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//代码可以优化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; data = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Character&gt; operator = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        s = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>( (i+<span class="number">1</span>) &lt; s.length() &amp;&amp; s.charAt(i+<span class="number">1</span>) == <span class="string">&#x27;-&#x27;</span> )&#123;</span><br><span class="line">                        data.push(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    operator.push(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    operator.push(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    operator.pop();</span><br><span class="line">                    <span class="keyword">int</span> popNum = data.pop();</span><br><span class="line">                    calculateNum(popNum, data, operator);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> ( (i+j) &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i+j)) )&#123;</span><br><span class="line">                        sb.append(s.charAt(i+j));</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i = i+j-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">int</span> currentNum = Integer.parseInt(sb.toString());</span><br><span class="line">                    calculateNum(currentNum, data, operator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculateNum</span><span class="params">(<span class="keyword">int</span> currentNum, LinkedList&lt;Integer&gt; data, LinkedList&lt;Character&gt; operator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( operator.size() == <span class="number">0</span> )&#123;</span><br><span class="line">            data.push(currentNum);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> hasUseCurrentNum = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (operator.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27;+&#x27;</span> == operator.peek())&#123;</span><br><span class="line">                operator.pop();</span><br><span class="line">                <span class="keyword">int</span> temp = data.pop();</span><br><span class="line">                data.push(temp+currentNum);</span><br><span class="line">                hasUseCurrentNum = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;-&#x27;</span> == operator.peek())&#123;</span><br><span class="line">                operator.pop();</span><br><span class="line">                <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(data.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    temp = data.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                data.push(temp-currentNum);</span><br><span class="line">                hasUseCurrentNum = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!hasUseCurrentNum)&#123;</span><br><span class="line">                    data.push(currentNum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java里面的栈Stack底层是数组结构，在容量不够时，难免会涉及扩容，扩容则需要迁移数据，效率较低。这里使用LinkedList作为栈使用。下图第二行是使用Stack实现，执行用时56ms，第一行是使用LinkedList实现，执行用时17ms</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/02/article01/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/01.png"></p>
<p>题目转载自：<a href="https://leetcode-cn.com/problems/basic-calculator">https://leetcode-cn.com/problems/basic-calculator</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>常用JVM分析工具</title>
    <url>/2022/02/21/%E5%B8%B8%E7%94%A8JVM%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章是2020年在CSDN发表的，因为最近要使用其中工具，所以做文章迁移</p>
</blockquote>
<p>以下工具是基于JDK11.0.5版本</p>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>Java虚拟机进程状态工具</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jps [options] [hostid]</span><br><span class="line">  -q 显示进程ID</span><br><span class="line">  -m 显示进程ID、主类名、传入主方法的参数</span><br><span class="line">  -l 显示进程ID、全类名</span><br><span class="line">  -v 显示进程ID、主类名、虚拟机参数</span><br><span class="line">  -V 显示进程ID、主类名【默认】</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>Java虚拟机统计监控工具</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstat [ generalOption | outputOptions vmid [ interval [ s|ms ] [ count ] ] ]</span><br><span class="line">  -generalOption通用信息，可传入-help(显示帮助信息) -version(显示版本信息[测试过，无效]) -options(显示可用的统计选项)</span><br><span class="line">  -outputOptions一个或者多个输出选项，常用的如</span><br><span class="line">  		-<span class="class"><span class="keyword">class</span> 类加载的统计信息</span></span><br><span class="line"><span class="class">  		-<span class="title">complier</span> 即时编译器统计信息</span></span><br><span class="line"><span class="class">  		-<span class="title">gc</span> 垃圾收集器统计</span></span><br><span class="line"><span class="class">  -<span class="title">vmid</span> 本地虚拟机进程的话，则为对应进程<span class="title">ID</span>(可通过<span class="title">jps</span>查进程<span class="title">ID</span>)。另外，也可以查看远程虚拟机进程</span></span><br><span class="line"><span class="class">  -<span class="title">interval</span> 统计的时间间隔，默认为微秒</span></span><br><span class="line"><span class="class">  -<span class="title">count</span> 总共统计次数</span></span><br></pre></td></tr></table></figure>

<p>案例</p>
<p><em>~ jstat -class 1251</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jstat -<span class="class"><span class="keyword">class</span> 1251</span></span><br><span class="line"><span class="class">加载的类 加载类的总大小   卸载的类     卸载类的总大小		 类加载和卸载总花费时间</span></span><br><span class="line"><span class="class"><span class="title">Loaded</span>  <span class="title">Bytes</span>  				<span class="title">Unloaded</span>  	<span class="title">Bytes</span>     			<span class="title">Time</span>   </span></span><br><span class="line"><span class="class">  4426  8085.9      	182   			214.5       		5.79</span></span><br></pre></td></tr></table></figure>

<p><em>~ jstat -gc 1251</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jstat -gc <span class="number">1251</span></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line"> <span class="number">0.0</span>    <span class="number">0.0</span>    <span class="number">0.0</span>    <span class="number">0.0</span>   <span class="number">11264.0</span>   <span class="number">2048.0</span>   <span class="number">16384.0</span>     <span class="number">7254.0</span>   <span class="number">27440.0</span> <span class="number">26286.1</span> <span class="number">3200.0</span> <span class="number">2789.7</span>      <span class="number">7</span>    <span class="number">0.072</span>  <span class="number">13</span>      <span class="number">0.360</span>    <span class="number">0.433</span></span><br><span class="line"> </span><br><span class="line"> 各列含义：</span><br><span class="line">|SOC    | 幸存区<span class="number">0</span>大小(KB)|</span><br><span class="line">|S1C    | 幸存区<span class="number">1</span>大小(KB)|</span><br><span class="line">|S0U    | 幸存区<span class="number">0</span>使用大小(KB)|</span><br><span class="line">|S1U    | 幸存区<span class="number">1</span>使用大小(KB)|</span><br><span class="line">|EC     | eden区空间大小(KB)|</span><br><span class="line">|EU     | eden区空间使用大小(KB)|</span><br><span class="line">|OC     | 老年代大小(KB)|</span><br><span class="line">|OU     | 老年代使用大小(KB)|</span><br><span class="line">|MC     | 元空间大小(KB)-<span class="number">1.8</span>版本之后，用于存放方法区数据|</span><br><span class="line">|MU     | 元空间使用大小(KB)|</span><br><span class="line">|CCSC   | 压缩类空间大小(KB)|</span><br><span class="line">|CCSU   | 压缩类空间使用大小(KB)|</span><br><span class="line">|PC     | 永久区大小(KB)|</span><br><span class="line">|PU     | 永久区使用大小(KB)|</span><br><span class="line">|YGC    | 发生young GC次数|</span><br><span class="line">|YGCT   | young GC所使用时间|</span><br><span class="line">|FGC    | 发生full GC次数|</span><br><span class="line">|FGCT   | full GC所使用时间|</span><br><span class="line">|GCT    | 总共垃圾回收时间|</span><br></pre></td></tr></table></figure>

<p><em>~ jstat -gcutil 1251</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jstat -gcutil <span class="number">1251</span></span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">  <span class="number">0.00</span>   <span class="number">0.00</span>  <span class="number">27.27</span>  <span class="number">44.27</span>  <span class="number">95.79</span>  <span class="number">87.18</span>      <span class="number">7</span>    <span class="number">0.072</span>    <span class="number">13</span>    <span class="number">0.360</span>    <span class="number">0.433</span></span><br><span class="line">  </span><br><span class="line"> 各列含义：</span><br><span class="line">|S0     | 幸存区<span class="number">0</span>使用百分比|</span><br><span class="line">|S1     | 幸存区<span class="number">1</span>使用百分比|</span><br><span class="line">|E      | eden区使用百分比|</span><br><span class="line">|O      | 老年代使用百分比|</span><br><span class="line">|M      | 元空间使用百分比|</span><br><span class="line">|CCS    | 压缩类空间使用百分比|</span><br><span class="line">|YGC    | 发生young GC次数|</span><br><span class="line">|YGCT   | young GC所使用时间|</span><br><span class="line">|FGC    | 发生full GC次数|</span><br><span class="line">|FGCT   | full GC所使用时间|</span><br><span class="line">|GCT    | 总共垃圾回收时间|</span><br></pre></td></tr></table></figure>

<h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><p>打印配置信息【重点其实是可以动态设置虚拟机参数】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jinfo [ option ] pid</span><br><span class="line">  -flags 可以动态的设置或者取消或者变更JVM参数</span><br><span class="line">  默认输出系统属性、JVM信息(官方目前推荐用jcmd替代jinfo，以减少影响当前进程性能)</span><br></pre></td></tr></table></figure>

<p>案例</p>
<p><em>jinfo 6564(这个命令jdk1.8报各种错，暂未解决)</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jinfo <span class="number">6564</span></span><br><span class="line">Java System Properties:</span><br><span class="line">#Mon Mar <span class="number">23</span> <span class="number">23</span>:<span class="number">47</span>:<span class="number">56</span> CST <span class="number">2020</span></span><br><span class="line">gopherProxySet=<span class="keyword">false</span></span><br><span class="line">socksProxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">awt.toolkit=sun.lwawt.macosx.LWCToolkit</span><br><span class="line">http.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">java.specification.version=<span class="number">11</span></span><br><span class="line">sun.cpu.isalist=</span><br><span class="line">sun.jnu.encoding=UTF-<span class="number">8</span></span><br><span class="line">java.class.path=/Users/laicreasy/github/peach/classical/target/test-classes\:/Users/laicreasy/github/peach/classical/target/classes\:/Users/laicreasy/.m2/repository/junit/junit/<span class="number">4.13</span>/junit-<span class="number">4.13</span>.jar\:/Users/laicreasy/.m2/repository/org/hamcrest/hamcrest-core/<span class="number">1.3</span>/hamcrest-core-<span class="number">1.3</span>.jar\:/Users/laicreasy/.m2/repository/org/apache/logging/log4j/log4j-api/<span class="number">2.13</span><span class="number">.1</span>/log4j-api-<span class="number">2.13</span><span class="number">.1</span>.jar\:/Users/laicreasy/.m2/repository/org/apache/logging/log4j/log4j-core/<span class="number">2.13</span><span class="number">.1</span>/log4j-core-<span class="number">2.13</span><span class="number">.1</span>.jar</span><br><span class="line">https.proxyPort=<span class="number">8001</span></span><br><span class="line">java.vm.vendor=Oracle Corporation</span><br><span class="line">sun.arch.data.model=<span class="number">64</span></span><br><span class="line">java.vendor.url=http\:<span class="comment">//java.oracle.com/</span></span><br><span class="line">user.timezone=Asia/Shanghai</span><br><span class="line">java.vm.specification.version=<span class="number">11</span></span><br><span class="line">os.name=Mac OS X</span><br><span class="line">sun.java.launcher=SUN_STANDARD</span><br><span class="line">user.country=CN</span><br><span class="line">sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-<span class="number">11.0</span><span class="number">.5</span>.jdk/Contents/Home/lib</span><br><span class="line">sun.java.command=com.creasy.Concurrency</span><br><span class="line">jdk.debug=release</span><br><span class="line">sun.cpu.endian=little</span><br><span class="line">user.home=/Users/laicreasy</span><br><span class="line">user.language=en</span><br><span class="line">java.specification.vendor=Oracle Corporation</span><br><span class="line">java.version.date=<span class="number">2019</span>-<span class="number">10</span>-<span class="number">15</span></span><br><span class="line">java.home=/Library/Java/JavaVirtualMachines/jdk-<span class="number">11.0</span><span class="number">.5</span>.jdk/Contents/Home</span><br><span class="line">file.separator=/</span><br><span class="line">https.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">java.vm.compressedOopsMode=Zero based</span><br><span class="line">line.separator=\n</span><br><span class="line">java.specification.name=Java Platform API Specification</span><br><span class="line">java.vm.specification.vendor=Oracle Corporation</span><br><span class="line">java.awt.graphicsenv=sun.awt.CGraphicsEnvironment</span><br><span class="line">sun.management.compiler=HotSpot <span class="number">64</span>-Bit Tiered Compilers</span><br><span class="line">java.runtime.version=<span class="number">11.0</span><span class="number">.5</span>+<span class="number">10</span>-LTS</span><br><span class="line">user.name=laicreasy</span><br><span class="line">path.separator=\:</span><br><span class="line">os.version=<span class="number">10.15</span><span class="number">.2</span></span><br><span class="line">java.runtime.name=Java(TM) SE Runtime Environment</span><br><span class="line">file.encoding=UTF-<span class="number">8</span></span><br><span class="line">java.vm.name=<span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server VM</span></span><br><span class="line"><span class="function">java.vendor.version</span>=<span class="number">18.9</span></span><br><span class="line">java.vendor.url.bug=http\:<span class="comment">//bugreport.java.com/bugreport/</span></span><br><span class="line">java.io.tmpdir=/<span class="keyword">var</span>/folders/w9/1vphl83x0rz54l_x9p118n5w0000gn/T/</span><br><span class="line">java.version=<span class="number">11.0</span><span class="number">.5</span></span><br><span class="line">user.dir=/Users/laicreasy/github/peach/classical</span><br><span class="line">os.arch=x86_64</span><br><span class="line">socksProxyPort=<span class="number">1081</span></span><br><span class="line">java.vm.specification.name=Java Virtual Machine Specification</span><br><span class="line">java.awt.printerjob=sun.lwawt.macosx.CPrinterJob</span><br><span class="line">sun.os.patch.level=unknown</span><br><span class="line">java.library.path=/Users/laicreasy/Library/Java/Extensions\:/Library/Java/Extensions\:/Network/Library/Java/Extensions\:/System/Library/Java/Extensions\:/usr/lib/java\:.</span><br><span class="line">java.vendor=Oracle Corporation</span><br><span class="line">java.vm.info=mixed mode</span><br><span class="line">java.vm.version=<span class="number">11.0</span><span class="number">.5</span>+<span class="number">10</span>-LTS</span><br><span class="line">sun.io.unicode.encoding=UnicodeBig</span><br><span class="line">java.class.version=<span class="number">55.0</span></span><br><span class="line">http.proxyPort=<span class="number">8001</span></span><br><span class="line"></span><br><span class="line">VM Flags:</span><br><span class="line">-XX:CICompilerCount=<span class="number">3</span> -XX:ConcGCThreads=<span class="number">1</span> -XX:G1ConcRefinementThreads=<span class="number">4</span> -XX:G1HeapRegionSize=<span class="number">1048576</span> -XX:GCDrainStackTargetSize=<span class="number">64</span> -XX:InitialHeapSize=<span class="number">134217728</span> -XX:MarkStackSize=<span class="number">4194304</span> -XX:MaxHeapSize=<span class="number">2147483648</span> -XX:MaxNewSize=<span class="number">1287651328</span> -XX:MinHeapDeltaBytes=<span class="number">1048576</span> -XX:NonNMethodCodeHeapSize=<span class="number">5830732</span> -XX:NonProfiledCodeHeapSize=<span class="number">122913754</span> -XX:ProfiledCodeHeapSize=<span class="number">122913754</span> -XX:ReservedCodeCacheSize=<span class="number">251658240</span> -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseG1GC </span><br><span class="line"></span><br><span class="line">VM Arguments:</span><br><span class="line">jvm_args: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=<span class="number">49825</span>:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-<span class="number">8</span> </span><br><span class="line">java_command: com.creasy.<span class="function">Concurrency</span></span><br><span class="line"><span class="function"><span class="title">java_class_path</span> <span class="params">(initial)</span>: /Users/laicreasy/github/peach/classical/target/test-classes:/Users/laicreasy/github/peach/classical/target/classes:/Users/laicreasy/.m2/repository/junit/junit/4.13/junit-4.13.jar:/Users/laicreasy/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/laicreasy/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.1/log4j-api-2.13.1.jar:/Users/laicreasy/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.1/log4j-core-2.13.1.jar</span></span><br><span class="line"><span class="function">Launcher Type: SUN_STANDARD</span></span><br></pre></td></tr></table></figure>

<h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p>查看堆内存信息，可以生成dump文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jmap [ option ] pid</span><br><span class="line">常用如</span><br><span class="line">	jmap -heap pid显示堆配置和使用情况</span><br><span class="line">	jmap -clstats &lt;pid&gt;显示类加载器信息</span><br><span class="line">    jmap -finalizerinfo &lt;pid&gt;打印等会finalization的对象信息</span><br><span class="line">    jmap -histo[:live] &lt;pid&gt;堆中对象的统计，如果加上了[:live]，那么只统计当前存活的对象</span><br><span class="line">    jmap -dump:&lt;dump-options&gt; &lt;pid&gt;生成堆转储快照</span><br><span class="line">	    dump-options:</span><br><span class="line">  	    -live        只包括当前存活的对象</span><br><span class="line">    	-format=b     二进制格式</span><br><span class="line">      	-file=&lt;file&gt;  保存的文件名</span><br></pre></td></tr></table></figure>

<p>案例</p>
<p><em>~ jhsdb jmap –heap –pid 7157(jdk11下，jmap -heap pid无效)</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jhsdb jmap --heap --pid <span class="number">7157</span></span><br><span class="line">Attaching to process ID <span class="number">7157</span>, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is <span class="number">11.0</span><span class="number">.5</span>+<span class="number">10</span>-LTS</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Garbage-First (G1) GC with <span class="number">4</span> thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = <span class="number">40</span></span><br><span class="line">   MaxHeapFreeRatio         = <span class="number">70</span></span><br><span class="line">   MaxHeapSize              = <span class="number">2147483648</span> (<span class="number">2048.</span>0MB)</span><br><span class="line">   NewSize                  = <span class="number">1363144</span> (<span class="number">1.</span>2999954223632812MB)</span><br><span class="line">   MaxNewSize               = <span class="number">1287651328</span> (<span class="number">1228.</span>0MB)</span><br><span class="line">   OldSize                  = <span class="number">5452592</span> (<span class="number">5.</span>1999969482421875MB)</span><br><span class="line">   NewRatio                 = <span class="number">2</span></span><br><span class="line">   SurvivorRatio            = <span class="number">8</span></span><br><span class="line">   MetaspaceSize            = <span class="number">21807104</span> (<span class="number">20.</span>796875MB)</span><br><span class="line">   CompressedClassSpaceSize = <span class="number">1073741824</span> (<span class="number">1024.</span>0MB)</span><br><span class="line">   MaxMetaspaceSize         = <span class="number">17592186044415</span> MB</span><br><span class="line">   G1HeapRegionSize         = <span class="number">1048576</span> (<span class="number">1.</span>0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">G1 Heap:</span><br><span class="line">   regions  = <span class="number">2048</span></span><br><span class="line">   capacity = <span class="number">2147483648</span> (<span class="number">2048.</span>0MB)</span><br><span class="line">   used     = <span class="number">3145728</span> (<span class="number">3.</span>0MB)</span><br><span class="line">   free     = <span class="number">2144337920</span> (<span class="number">2045.</span>0MB)</span><br><span class="line">   <span class="number">0.146484375</span>% used</span><br><span class="line">G1 Young Generation:</span><br><span class="line">Eden Space:</span><br><span class="line">   regions  = <span class="number">4</span></span><br><span class="line">   capacity = <span class="number">15728640</span> (<span class="number">15.</span>0MB)</span><br><span class="line">   used     = <span class="number">4194304</span> (<span class="number">4.</span>0MB)</span><br><span class="line">   free     = <span class="number">11534336</span> (<span class="number">11.</span>0MB)</span><br><span class="line">   <span class="number">26.666666666666668</span>% used</span><br><span class="line">Survivor Space:</span><br><span class="line">   regions  = <span class="number">0</span></span><br><span class="line">   capacity = <span class="number">0</span> (<span class="number">0.</span>0MB)</span><br><span class="line">   used     = <span class="number">0</span> (<span class="number">0.</span>0MB)</span><br><span class="line">   free     = <span class="number">0</span> (<span class="number">0.</span>0MB)</span><br><span class="line">   <span class="number">0.0</span>% used</span><br><span class="line">G1 Old Generation:</span><br><span class="line">   regions  = <span class="number">0</span></span><br><span class="line">   capacity = <span class="number">118489088</span> (<span class="number">113.</span>0MB)</span><br><span class="line">   used     = <span class="number">0</span> (<span class="number">0.</span>0MB)</span><br><span class="line">   free     = <span class="number">118489088</span> (<span class="number">113.</span>0MB)</span><br><span class="line">   <span class="number">0.0</span>% used</span><br></pre></td></tr></table></figure>

<p><em>~ jmap -histo:live 7588</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jmap -histo:live <span class="number">7588</span></span><br><span class="line"> num     #instances         #<span class="function">bytes  class <span class="title">name</span> <span class="params">(<span class="keyword">module</span>)</span></span></span><br><span class="line"><span class="function">-------------------------------------------------------</span></span><br><span class="line"><span class="function">   1:          7610         607736  [<span class="title">B</span> <span class="params">(java.base@<span class="number">11.0</span><span class="number">.5</span>)</span></span></span><br><span class="line"><span class="function">   2:          7069         169656  java.lang.<span class="title">String</span> <span class="params">(java.base@<span class="number">11.0</span><span class="number">.5</span>)</span></span></span><br><span class="line"><span class="function">   3:          1201         146592  java.lang.<span class="title">Class</span> <span class="params">(java.base@<span class="number">11.0</span><span class="number">.5</span>)</span></span></span><br><span class="line"><span class="function">   4:          3640         116480  java.util.HashMap$<span class="title">Node</span> <span class="params">(java.base@<span class="number">11.0</span><span class="number">.5</span>)</span></span></span><br><span class="line"><span class="function">   5:          1166          98920  [Ljava.lang.Object</span>; (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">   <span class="number">6</span>:           <span class="number">379</span>          <span class="number">53792</span>  [Ljava.util.HashMap$Node; (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">   <span class="number">7</span>:            <span class="number">12</span>          <span class="number">50104</span>  [C (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">   <span class="number">8</span>:           <span class="number">332</span>          <span class="number">41120</span>  [I (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">   <span class="number">9</span>:          <span class="number">1232</span>          <span class="number">39424</span>  java.util.concurrent.ConcurrentHashMap$Node (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">  <span class="number">10</span>:           <span class="number">645</span>          <span class="number">25800</span>  java.util.LinkedHashMap$Entry (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">  <span class="number">11</span>:           <span class="number">392</span>          <span class="number">18816</span>  java.util.HashMap (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">  <span class="number">12</span>:            <span class="number">46</span>          <span class="number">17440</span>  [Ljava.util.concurrent.ConcurrentHashMap$Node; (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">  <span class="number">13</span>:           <span class="number">289</span>          <span class="number">13792</span>  [Ljava.lang.String; (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">...</span><br><span class="line"> <span class="number">511</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.nio.fs.NativeBuffers$<span class="number">1</span> (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line"> <span class="number">512</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.util.calendar.Gregorian (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line"> <span class="number">513</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.util.cldr.CLDRBaseLocaleDataMetaInfo (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line"> <span class="number">514</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line"> <span class="number">515</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line"> <span class="number">516</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.util.resources.LocaleData$LocaleDataStrategy (java.base@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line"> <span class="number">517</span>:             <span class="number">1</span>             <span class="number">16</span>  sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo (jdk.localedata@<span class="number">11.0</span><span class="number">.5</span>)</span><br><span class="line">Total         <span class="number">30567</span>        <span class="number">1623664</span></span><br></pre></td></tr></table></figure>

<p><em>~ jmap -dump:live,format=b,file=heap.bin 7588</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jmap -dump:live,format=b,file=heap.bin <span class="number">7588</span> </span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure>

<h3 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h3><p>java堆分析工具，上述dump文件可以通过这个工具进行分析。这个工具会启动一个小型http服务器，可以通过浏览器查看分析结果。JDK11已经去掉了这个工具，直接用visual vm可视化工具分析</p>
<p>案例</p>
<p><em>jhat heap.bin</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jhat heap.bin</span><br><span class="line">Reading from heap.bin...</span><br><span class="line">Dump file created Tue Mar <span class="number">24</span> <span class="number">02</span>:<span class="number">06</span>:<span class="number">41</span> CST <span class="number">2020</span></span><br><span class="line">Snapshot read, resolving...</span><br><span class="line">Resolving <span class="number">30513</span> objects...</span><br><span class="line">Chasing references, expect <span class="number">6</span> dots......</span><br><span class="line">Eliminating duplicate references......</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port <span class="number">7000</span></span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure>

<p>打开浏览器，<a href="http://localhost:7000/">http://localhost:7000/</a> 即可看到分析信息</p>
<h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>打印线程栈信息，如可用来分析死循环、死锁等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstack [ option ] pid</span><br><span class="line">	-m 打印Java和C++栈信息</span><br><span class="line">	-l 额外打印关于锁的信息</span><br></pre></td></tr></table></figure>

<p>案例</p>
<p><em>jstack -l 7588</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➜  ~ jstack -l <span class="number">7588</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">24</span> <span class="number">02</span>:<span class="number">38</span>:<span class="number">42</span></span><br><span class="line"><span class="function">Full thread dump Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(<span class="number">11.0</span><span class="number">.5</span>+<span class="number">10</span>-LTS mixed mode)</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Threads class SMR info:</span></span><br><span class="line"><span class="function">_java_thread_list</span>=<span class="number">0x00007fb213e2d690</span>, length=<span class="number">11</span>, elements=&#123;</span><br><span class="line"><span class="number">0x00007fb215805800</span>, <span class="number">0x00007fb21404a800</span>, <span class="number">0x00007fb21483a000</span>, <span class="number">0x00007fb21404f000</span>,</span><br><span class="line"><span class="number">0x00007fb21501d800</span>, <span class="number">0x00007fb214064000</span>, <span class="number">0x00007fb215018000</span>, <span class="number">0x00007fb2140d3000</span>,</span><br><span class="line"><span class="number">0x00007fb214943000</span>, <span class="number">0x00007fb214810000</span>, <span class="number">0x00007fb214150800</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;main&quot;</span> #<span class="number">1</span> prio=<span class="number">5</span> os_prio=<span class="number">31</span> cpu=<span class="number">314.</span>71ms elapsed=<span class="number">2576.</span>00s tid=<span class="number">0x00007fb215805800</span> nid=<span class="number">0x2703</span> runnable  [<span class="number">0x000070000439c000</span>]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at java.io.FileInputStream.readBytes(java.base@<span class="number">11.0</span><span class="number">.5</span>/Native Method)</span><br><span class="line">	at java.io.FileInputStream.read(java.base@<span class="number">11.0</span><span class="number">.5</span>/FileInputStream.java:<span class="number">279</span>)</span><br><span class="line">	at java.io.BufferedInputStream.fill(java.base@<span class="number">11.0</span><span class="number">.5</span>/BufferedInputStream.java:<span class="number">252</span>)</span><br><span class="line">	at java.io.BufferedInputStream.read(java.base@<span class="number">11.0</span><span class="number">.5</span>/BufferedInputStream.java:<span class="number">271</span>)</span><br><span class="line">	- locked &lt;<span class="number">0x00000007801261e8</span>&gt; (a java.io.BufferedInputStream)</span><br><span class="line">	at com.creasy.Concurrency.main(Concurrency.java:<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">	- None</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Reference Handler&quot;</span> #<span class="number">2</span> daemon prio=<span class="number">10</span> os_prio=<span class="number">31</span> cpu=<span class="number">0.</span>36ms elapsed=<span class="number">2575.</span>95s tid=<span class="number">0x00007fb21404a800</span> nid=<span class="number">0x3403</span> waiting on condition  [<span class="number">0x0000700004ab1000</span>]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at java.lang.ref.Reference.waitForReferencePendingList(java.base@<span class="number">11.0</span><span class="number">.5</span>/Native Method)</span><br><span class="line">	at java.lang.ref.Reference.processPendingReferences(java.base@<span class="number">11.0</span><span class="number">.5</span>/Reference.java:<span class="number">241</span>)</span><br><span class="line">	at java.lang.ref.Reference$ReferenceHandler.run(java.base@<span class="number">11.0</span><span class="number">.5</span>/Reference.java:<span class="number">213</span>)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">	- None</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Finalizer&quot;</span> #<span class="number">3</span> daemon prio=<span class="number">8</span> os_prio=<span class="number">31</span> cpu=<span class="number">0.</span>46ms elapsed=<span class="number">2575.</span>95s tid=<span class="number">0x00007fb21483a000</span> nid=<span class="number">0x4903</span> in Object.wait()  [<span class="number">0x0000700004bb4000</span>]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">	at java.lang.Object.wait(java.base@<span class="number">11.0</span><span class="number">.5</span>/Native Method)</span><br><span class="line">	- waiting on &lt;<span class="number">0x00000007801218f8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">	at java.lang.ref.ReferenceQueue.remove(java.base@<span class="number">11.0</span><span class="number">.5</span>/ReferenceQueue.java:<span class="number">155</span>)</span><br><span class="line">	- waiting to re-<span class="function">lock in <span class="title">wait</span><span class="params">()</span> &lt;0x00000007801218f8&gt; <span class="params">(a java.lang.ref.ReferenceQueue$Lock)</span></span></span><br><span class="line"><span class="function">	at java.lang.ref.ReferenceQueue.<span class="title">remove</span><span class="params">(java.base@<span class="number">11.0</span><span class="number">.5</span>/ReferenceQueue.java:<span class="number">176</span>)</span></span></span><br><span class="line"><span class="function">	at java.lang.ref.Finalizer$FinalizerThread.<span class="title">run</span><span class="params">(java.base@<span class="number">11.0</span><span class="number">.5</span>/Finalizer.java:<span class="number">170</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   Locked ownable synchronizers:</span></span><br><span class="line"><span class="function">	- None</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&quot;VM Thread&quot; os_prio</span>=<span class="number">31</span> cpu=<span class="number">150.</span>43ms elapsed=<span class="number">2575.</span>96s tid=<span class="number">0x00007fb214002800</span> nid=<span class="number">0x4d03</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;GC Thread#0&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">12.</span>00ms elapsed=<span class="number">2575.</span>99s tid=<span class="number">0x00007fb215005000</span> nid=<span class="number">0x2d03</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;GC Thread#1&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">6.</span>44ms elapsed=<span class="number">2425.</span>77s tid=<span class="number">0x00007fb215896000</span> nid=<span class="number">0x4207</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;GC Thread#2&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">8.</span>37ms elapsed=<span class="number">2425.</span>77s tid=<span class="number">0x00007fb214075000</span> nid=<span class="number">0x5f03</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;G1 Main Marker&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">0.</span>91ms elapsed=<span class="number">2575.</span>99s tid=<span class="number">0x00007fb214022800</span> nid=<span class="number">0x5203</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;G1 Conc#0&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">0.</span>04ms elapsed=<span class="number">2575.</span>99s tid=<span class="number">0x00007fb215005800</span> nid=<span class="number">0x5003</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;G1 Refine#0&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">0.</span>71ms elapsed=<span class="number">2575.</span>99s tid=<span class="number">0x00007fb215836800</span> nid=<span class="number">0x3103</span> runnable  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;G1 Young RemSet Sampling&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">386.</span>00ms elapsed=<span class="number">2575.</span>99s tid=<span class="number">0x00007fb214041800</span> nid=<span class="number">0x3203</span> runnable  </span><br><span class="line"><span class="string">&quot;VM Periodic Task Thread&quot;</span> os_prio=<span class="number">31</span> cpu=<span class="number">2000.</span>79ms elapsed=<span class="number">2575.</span>55s tid=<span class="number">0x00007fb214149800</span> nid=<span class="number">0x5b03</span> waiting on condition  </span><br><span class="line"></span><br><span class="line">JNI global refs: <span class="number">18</span>, weak refs: <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><h3 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h3><p>可以监控CPU、内存、线程等情况</p>
<p><em>~jconsole</em></p>
<p><img src="https://img-blog.csdnimg.cn/20200324033931992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyZWFzeWxhaTE5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="Visual-VM"><a href="#Visual-VM" class="headerlink" title="Visual VM"></a>Visual VM</h3><p>Visual VM是一款All-in-One的Java分析工具，堆栈信息、线程信息等都可以分析，而且还支持装插件。但jdk1.9之后默认JDK不再支持，可以通过<a href="https://visualvm.github.io/download.html">https://visualvm.github.io/download.html</a>这里下载</p>
<p>在1.8环境下执行</p>
<p><em>~ jvisualvm</em></p>
<p><img src="https://img-blog.csdnimg.cn/20200324033956836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyZWFzeWxhaTE5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>reference：</p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/11/troubleshoot/diagnostic-tools.html#GUID-CBC97A20-7379-4762-BA17-FB1A560D02E4">https://docs.oracle.com/en/java/javase/11/troubleshoot/diagnostic-tools.html#GUID-CBC97A20-7379-4762-BA17-FB1A560D02E4</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Bug</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac修改MySQL配置文件</title>
    <url>/2022/05/28/Mac%E4%BF%AE%E6%94%B9MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>因为最近在验证binlog相关功能，所以想修改log-bin参数以启用该功能，所以需要修改配置文件。以下是踩坑之后总结出的过程</p>
<h5 id="配置文件的路径"><a href="#配置文件的路径" class="headerlink" title="配置文件的路径"></a>配置文件的路径</h5><p>查看<a href="https://dev.mysql.com/doc/refman/5.7/en/option-files.html">官方文档</a>后，知道下述方式均可修改启动配置文件，顺序是从上往下读，后面的会覆盖前面的</p>
<table>
<thead>
<tr>
<th align="left">File Name</th>
<th align="left">Purpose</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/etc/my.cnf</code></td>
<td align="left">Global options</td>
</tr>
<tr>
<td align="left"><code>/etc/mysql/my.cnf</code></td>
<td align="left">Global options</td>
</tr>
<tr>
<td align="left"><code>*</code>SYSCONFDIR<code>*/my.cnf</code></td>
<td align="left">Global options</td>
</tr>
<tr>
<td align="left"><code>$MYSQL_HOME/my.cnf</code></td>
<td align="left">Server-specific options (server only)</td>
</tr>
<tr>
<td align="left"><code>defaults-extra-file</code></td>
<td align="left">The file specified with <a href="https://dev.mysql.com/doc/refman/5.7/en/option-file-options.html#option_general_defaults-extra-file"><code>--defaults-extra-file</code></a>, if any</td>
</tr>
<tr>
<td align="left"><code>~/.my.cnf</code></td>
<td align="left">User-specific options</td>
</tr>
<tr>
<td align="left"><code>~/.mylogin.cnf</code></td>
<td align="left">User-specific login path options (clients only)</td>
</tr>
</tbody></table>
<span id="more"></span>


<p>但通过命令<code>mysqld --verbose --helpd</code>的输出参数知道，我的电脑及MySQL版本实际支持下方描述的方式配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Default options are read from the following files in the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf </span><br></pre></td></tr></table></figure>

<h5 id="生成配置文件并修改权限"><a href="#生成配置文件并修改权限" class="headerlink" title="生成配置文件并修改权限"></a>生成配置文件并修改权限</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line">touch my.cnf</span><br><span class="line"><span class="comment">#把文件所有者修改为_mysql</span></span><br><span class="line">sudo chown _mysql my.cnf</span><br><span class="line"><span class="comment">#把文件权限修改为644。如果权限是777，MySQL会忽略这个配置文件(坑)</span></span><br><span class="line">sudo chmod 644 my.cnf</span><br></pre></td></tr></table></figure>

<p>使用编辑器，修改配置文件(如果使用vim修改配置，需要在修改所有者之前修改配置，或者修改my.cnf权限为777之后修改配置，但这样改完配置后，还要改文件权限为644)。我是直接用sublime修改</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=/usr/local/mysql/mysql-bin/mysql-bin</span><br><span class="line"><span class="attr">binlog-format</span>=ROW</span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h5 id="创建文件夹及文件"><a href="#创建文件夹及文件" class="headerlink" title="创建文件夹及文件"></a>创建文件夹及文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/</span><br><span class="line"><span class="comment">#创建文件夹并修改所有者</span></span><br><span class="line">mkdir mysql-bin</span><br><span class="line">chown _mysql mysql-bin</span><br><span class="line"><span class="comment">#创建文件并修改所有者</span></span><br><span class="line"><span class="built_in">cd</span> mysql-bin</span><br><span class="line">touch mysql-bin.index</span><br><span class="line">chown _mysql mysql-bin.index</span><br></pre></td></tr></table></figure>



<p>在系统偏好设置-&gt;MySQL中启动</p>
<h5 id="其他问题："><a href="#其他问题：" class="headerlink" title="其他问题："></a>其他问题：</h5><ol>
<li>通过官方shell脚本启动或重启，一直提示错误，原因暂未找到</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server restart</span><br><span class="line"> ERROR! MySQL server PID file could not be found!</span><br><span class="line">Starting MySQL</span><br><span class="line">..^C</span><br><span class="line">➜  ~ </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动时的错误日志在/usr/local/mysql/data/mysqld.local.err，这个是最大的坑。因为日志使用时间是祖鲁时间，找了半天启动日志把这个日志忽略了。祖鲁时间比北京时间晚8个小时。</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">2022-05-27T19:08:37.136167Z 294 [Note] Access denied for user &#x27;creasylai&#x27;@&#x27;localhost&#x27; (using password: NO)</span><br></pre></td></tr></table></figure>

<p>如上时间，北京时间实际是，很容易让人忽略</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article01/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article01/01.png"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>从使用场景分析ReentrantLock源码(待完成)</title>
    <url>/2022/04/20/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>Lock接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Condition接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">awaitUninterruptibly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">awaitNanos</span><span class="params">(<span class="keyword">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitUntil</span><span class="params">(Date deadline)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> AbstractQueuedSynchronizer类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">        Node nextWaiter;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">            Node p = prev;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">        &#125;</span><br><span class="line">        Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">            <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">        Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">            <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ReentrantLock</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>如何面试研发工程师(待完成)</title>
    <url>/2022/02/25/%E5%A6%82%E4%BD%95%E9%9D%A2%E8%AF%95%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
    <content><![CDATA[<p>面试结束写面试评价</p>
<ul>
<li>Coding question 写代码问题：需要写实际的代码，语言不限；</li>
<li>Design question 设计问题：系统设计、功能设计；</li>
<li>Analytical question 分析问题：算法、数据结构、问题分析、逻辑分析、等等；</li>
<li>Open ended question 无固定答案问题：主要看候选人的逻辑分析和问题解决能力；</li>
</ul>
<span id="more"></span>

<p>Google的打分解释：<br>1分：坚决不要，而且愿意说服他人为什么不要<br>2分：不要，但可以被别人说服要<br>3分：要，但可以被别人说服成不要<br>4分：坚决要，吐血推荐。愿意说服他人为什么非要不可</p>
<p>面试技术管理者</p>
<ul>
<li>工程能力和系统设计能力</li>
<li>团队组织架构设计能力</li>
<li>技术的宽度和深度</li>
<li>如何激励团队成长</li>
<li>研发团队绩效考核怎么做</li>
</ul>
<p>参考：<a href="https://medium.com/@philying/%E5%A6%82%E4%BD%95%E9%9D%A2%E8%AF%95%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-4078177d1cb8">https://medium.com/@philying/%E5%A6%82%E4%BD%95%E9%9D%A2%E8%AF%95%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-4078177d1cb8</a></p>
]]></content>
      <categories>
        <category>管理</category>
      </categories>
      <tags>
        <tag>管理者</tag>
        <tag>面试官</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从搭建(待完成)</title>
    <url>/2022/05/29/MySQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>目前我所在公司，申请数据库时，基本都是MySQL主从交付。这篇文章，也主要讲下MySQL主从</p>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>MySQL高可用是基于binlog。对binlog的解释，可以参看下<a href="https://dev.mysql.com/doc/internals/en/binary-log-overview.html">官方文档</a></p>
<blockquote>
<p>The binary log is a set of log files that contain information about data modifications made to a MySQL server instance. The log is enabled by starting the server with the <code>--log-bin</code> option</p>
</blockquote>
<p>默认binlog是关闭的，可以通过下方语句查询得到Value为OFF</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_bin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>要打开binlog，可以通过修改配置文件/etc/my.cnf(Unix like系统下的配置)，重启MySQL</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#binlog文件的存放目录</span></span><br><span class="line"><span class="attr">log-bin</span>=/usr/local/mysql/mysql-bin/mysql-bin</span><br><span class="line"><span class="comment">#binlog文件格式</span></span><br><span class="line"><span class="attr">binlog-format</span>=MIXED</span><br><span class="line"><span class="comment">#server id</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="binlog-format三种格式"><a href="#binlog-format三种格式" class="headerlink" title="binlog-format三种格式"></a>binlog-format三种格式</h5><p>假设我们执行SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="comment">/*comment*/</span> <span class="keyword">where</span> c <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> d <span class="operator">&lt;=</span> <span class="number">25</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>STATEMENT格式</li>
</ul>
<p>binlog文件中记录的是原始的SQL语句，如上方SQL，binlog中记录的是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="comment">/*comment*/</span> <span class="keyword">where</span> c <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> d <span class="operator">&lt;=</span> <span class="number">25</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>这种格式可能导致主从数据不一致</p>
<ul>
<li>ROW格式**[推荐]**</li>
</ul>
<p>binlog文件中记录的是SQL语句影响的所有行，如上方SQL，binlog中可能记录的是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*所有满足的行都记录下来*/</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">20</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">21</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>如果<code>binlog_row_image</code>配置为FULL，表t还有其他字段，则binlog会把所有字段都记录下来。如上方SQL，binlog中可能记录的是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">20</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="number">20</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">21</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="number">20</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>这种格式缺点是可能导致记录的数据特别多，比如满足SQL条件的行有上千行，则binlog会全部记下所有行。优点是避开了statement格式的主从不一致的情况，另外，通过分析binlog，我们也很容易恢复被误修改的数据。生产上推荐这种方式</p>
<ul>
<li>MIXED格式</li>
</ul>
<p>这种格式是上两种方式的混合，由MySQL判断，如果不会造成主从不一致，则记录原始SQL语句(statement)，否则记录所有变更行(row)。</p>
<p>生产上首推ROW格式，易于恢复误修改数据。如果资源不足，可以考虑MIXED格式</p>
<h5 id="binlog文件分析"><a href="#binlog文件分析" class="headerlink" title="binlog文件分析"></a>binlog文件分析</h5><p>通过下方语句，可以查看binlog记录内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.000001&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article02/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article02/01.png"></p>
<p>ROW格式下，<code>show binlog</code>只能看到有那些变更，无法看到具体语句</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article02/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article02/02.png"></p>
<p>通过mysqlbinlog工具，可以分析ROW格式下的binlog</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlbinlog  -vv /usr/local/mysql-5.7.31-macos10.14-x86_64/mysql-bin/mysql-bin.000002 --start-position=544;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article02/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/05/article02/03.png"></p>
<p>另外，通过mysqlbinlog还可以执行binlog中的SQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlbinlog /usr/local/mysql-5.7.31-macos10.14-x86_64/mysql-bin/mysql-bin.000001  --start-position=544 --stop-position=862 | mysql -u$user -p$password;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>主从</tag>
        <tag>高可用</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven插件</title>
    <url>/2022/07/02/Maven%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>Maven是一款基于插件作业的构建工具，它自身内置了非常多我们平常开发所需要的插件。如清理资源插件<code>maven-clean-plugin</code>，编译插件<code>maven-compiler-plugin</code>，打包插件<code>maven-jar-plugin</code>等。在工作中，我们也可以开发自己的插件，帮助我们提高开发效率</p>
<p>下方以开发一个统计目录下所有文件的内容行数的插件为例</p>
<span id="more"></span>

<h4 id="创建Maven插件项目"><a href="#创建Maven插件项目" class="headerlink" title="创建Maven插件项目"></a>创建Maven插件项目</h4><p>使用archetype<code>maven-archetype-mojo</code>创建一个Maven项目(对应的groupid为<code>org.apache.maven.archetypes</code>)</p>
<p>项目名最好使用<code>name-maven-plugin</code>，这样后续可以直接使用name:goal来执行插件目标</p>
<p>如下图，IDEA创建了一个<code>count-maven-plugin</code>项目</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/07/article01/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/07/article01/01.png"></p>
<h4 id="修改POM文件"><a href="#修改POM文件" class="headerlink" title="修改POM文件"></a>修改POM文件</h4><p>IDEA自动创建的项目中，<code>maven-plugin-api</code>版本是2.0，太低了。我的Maven版本是3.6.3，所以这里我也把<code>maven-plugin-api</code>版本改成3.6.3</p>
<p>同时，我们加入<code>maven-plugin-annotations</code>依赖，这样开发时可以使用maven注解。同时，我们修改项目的JDK版本为1.8。最终的pom.xml文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.creasy.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>count-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>count-maven-plugin Maven Mojo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dependencies to annotations --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 没有3.6.3版本，我们使用3.6.2版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugin-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!-- annotations are not used at runtime because @Retention(value=CLASS), they are needed only to build the plugin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="添加goal对应的类"><a href="#添加goal对应的类" class="headerlink" title="添加goal对应的类"></a>添加goal对应的类</h4><p>项目默认创建了一个MyMojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.creasy.maven.plugins;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.AbstractMojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.MojoExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Goal which touches a timestamp file.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@goal</span> touch</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@phase</span> process-sources</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMojo</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMojo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Location of the file.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span> expression=&quot;$&#123;project.build.directory&#125;&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@required</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> File outputDirectory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> MojoExecutionException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        File f = outputDirectory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( !f.exists() )</span><br><span class="line">        &#123;</span><br><span class="line">            f.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File touch = <span class="keyword">new</span> File( f, <span class="string">&quot;touch.txt&quot;</span> );</span><br><span class="line"></span><br><span class="line">        FileWriter w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            w = <span class="keyword">new</span> FileWriter( touch );</span><br><span class="line"></span><br><span class="line">            w.write( <span class="string">&quot;touch.txt&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( IOException e )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MojoExecutionException( <span class="string">&quot;Error creating file &quot;</span> + touch, e );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( w != <span class="keyword">null</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    w.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> ( IOException e )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类很简单，就是在outputDirectory(对应目录为<code>$&#123;project.build.directory&#125;</code>，也就是常见的maven项目的target目录)目录下创建一个touch.txt文件，文件内容为touch.txt</p>
<p>我们参考MyMojo创建一个CountMojo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.creasy.maven.plugins;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.maven.model.Resource;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.AbstractMojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.MojoExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.LifecyclePhase;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.Mojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mojo(name = &quot;count&quot;,//对应插件的goal</span></span><br><span class="line"><span class="meta">        defaultPhase = LifecyclePhase.COMPILE,//绑定Maven的生命周期的默认值</span></span><br><span class="line"><span class="meta">        requiresProject = true,</span></span><br><span class="line"><span class="meta">        threadSafe = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountMojo</span> <span class="keyword">extends</span> <span class="title">AbstractMojo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameter(defaultValue = &quot;$&#123;project.build.sourceDirectory&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> File sourceDirectory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameter(defaultValue = &quot;$&#123;project.build.testSourceDirectory&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> File testSourceDirectory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameter(defaultValue = &quot;$&#123;project.resources&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Resource&gt; resources;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameter(defaultValue = &quot;$&#123;project.testResources&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Resource&gt; testResources;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> MojoExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countLine(sourceDirectory);</span><br><span class="line">            countLine(testSourceDirectory);</span><br><span class="line">            <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">                countLine(<span class="keyword">new</span> File(resource.getDirectory()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Resource testResource : testResources) &#123;</span><br><span class="line">                countLine(<span class="keyword">new</span> File(testResource.getDirectory()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MojoExecutionException(<span class="string">&quot;Unable to count line!&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countLine</span><span class="params">(File dir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( dir.exists() )&#123;</span><br><span class="line">            List&lt;File&gt; files = getFileByDir(dir);</span><br><span class="line">            <span class="keyword">long</span> line = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                line += countFile(file);</span><br><span class="line">            &#125;</span><br><span class="line">            getLog().info(String.format(<span class="string">&quot;Directory:%s, lines:%s&quot;</span>, dir.getPath(), line));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;File&gt; <span class="title">getFileByDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        List&lt;File&gt; retList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (File file : Objects.requireNonNull(dir.listFiles())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                retList.addAll(getFileByDir(file));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                retList.add(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">countFile</span><span class="params">(File f)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> retValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(f))) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">null</span> != bufferedReader.readLine()) &#123;</span><br><span class="line">                retValue++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类还是比较简单的，有几点内容说明下</p>
<ul>
<li><code>@Parameter(defaultValue = &quot;$&#123;project.build.sourceDirectory&#125;&quot;)</code></li>
</ul>
<p>类中的变量可以通过@Parameter注解，定义使用插件时可以传参，如果不传则默认使用项目的<code>$&#123;project.build.sourceDirectory&#125;</code>属性。project.build.sourceDirectory这个属性其实是在super POM中定义的，具体可以使用的变量参考<a href="https://maven.apache.org/ref/3.8.6/maven-core/apidocs/org/apache/maven/plugin/PluginParameterExpressionEvaluator.html">这里</a></p>
<ul>
<li>类必须继承AbstractMojo，实现execute接口</li>
<li>需要使用@Mojo注解的name属性定义goal</li>
</ul>
<p>以上，执行<code>mvn clean install</code>，即可把项目安装到本地仓库</p>
<h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>其他项目要使用插件，只需要在pom文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.creasy.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>count-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>count<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为count默认绑定了compile生命周期，所以这里至配置了插件的goal</p>
<p>执行<code>mvn clean compile</code>，如下，插件输出了每个资源目录下所有文件的内容行数</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/07/article01/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2022/07/article01/02.png"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>构建</tag>
      </tags>
  </entry>
</search>
