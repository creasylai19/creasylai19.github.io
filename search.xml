<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gitee实现图床</title>
    <url>/2021/09/10/Gitee%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>理论上，任何一个可以上传图片，且可以查看上传图片的网站，都可以作为图床</p>

</blockquote>

<p>网上有很多文章讲如何用Gitee作为图床，但基本都是通过PicGo这个应用实现，其实不用PicGo，也是可以实现用Gitee做图床。本文就是讲下在不使用PicGo和它的插件下，如何实现用Gitee做图床。</p>
<span id="more"></span>



<p>下方操作的前提</p>
<ul>
<li>了解简单的Git操作<font style="color: #ccc;">(如果不了解的话可以先到B站看个视频学习下哈)</font></li>
<li>注册了Gitee账号</li>
</ul>
<h3 id="1-Gitee创建仓库"><a href="#1-Gitee创建仓库" class="headerlink" title="1.Gitee创建仓库"></a>1.Gitee创建仓库</h3><p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>如上图，点击新建仓库</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<h5 id="仓库名称"><a href="#仓库名称" class="headerlink" title="仓库名称"></a>仓库名称</h5><p>随便填，这里演示我填写<code>blog.imgs</code>。路径会自动填充，保持跟仓库名称相同</p>
<h5 id="开源-OR-私有"><a href="#开源-OR-私有" class="headerlink" title="开源 OR 私有"></a>开源 OR 私有</h5><p>选择开源<font style="color: #ccc;">(如果选择私有的话，别人就看不到你的图片了)</font></p>
<h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><p><code>选择语言</code>，我选了HTML，其实选择那种语言是无所谓的，毕竟我们存放的是图片，并不是代码</p>
<p><code>添加.gitignore</code>，我的电脑是Mac，所以选择了macOS。Mac在每个文件夹下自动生成<code>.DS_Store</code>文件，这个我不想传到Gitee仓库去</p>
<p><code>添加开源许可证</code>，这个也是随意选，这里我选了GPL-2.0</p>
<p>点击创建</p>
<h3 id="2-Push图片到Gitee仓库"><a href="#2-Push图片到Gitee仓库" class="headerlink" title="2.Push图片到Gitee仓库"></a>2.Push图片到Gitee仓库</h3><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p>克隆仓库到自己电脑。仓库地址如截图</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>使用git命令clone到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:creasylai19/blog.imgs.git</span><br></pre></td></tr></table></figure>

<h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>把需要上传的图片复制到刚才创建的目录<code>blog.imgs</code>，再把文件push到Gitee仓库中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把变更的文件放到暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">#把暂存区的文件提交到本地仓库</span><br><span class="line">git commit -m &quot;提交图片&quot;</span><br><span class="line"></span><br><span class="line">#把本地仓库的提交推送到Gitee仓库中</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>推送完之后，Gitee仓库就有了我们刚上传的图片了</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/04.png"></p>
<p>这里，我把图片放到了20210910/article1/目录下</p>
<p>后续如果要添加其他图片，则重复<a href="https://lilongsheng.tech/2021/09/10/Gitee%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/#%E6%AD%A5%E9%AA%A4%E4%BA%8C">步骤二</a>即可</p>
<h3 id="3-获取图片地址"><a href="#3-获取图片地址" class="headerlink" title="3.获取图片地址"></a>3.获取图片地址</h3><p>点击Gitee仓库中任意一张图片，如下图，浏览器上方显示的地址是</p>
<p><code>https://gitee.com/creasylai19/blog.imgs/blob/master/20210910/article1/01.png</code></p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/05.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210910/article1/05.png"></p>
<p>则图片的实际地址是</p>
<p><code>https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png</code></p>
<p>即把上方地址的blob换成raw。得到这个地址则可以用到Markdown文档中</p>
<p><img src="https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png" alt="https://gitee.com/creasylai19/blog.imgs/raw/master/20210910/article1/01.png"></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode36-有效的数独</title>
    <url>/2021/11/23/LeetCode36/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p>
<ol>
<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>
<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li>
</ol>
<span id="more"></span>


<p><strong>注意：</strong></p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
<li>空白格用 <code>&#39;.&#39;</code> 表示。</li>
</ul>
<p><strong>示例 1：</strong></p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article1/01.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：board = </span><br><span class="line">[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：false</span><br><span class="line">解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>board.length == 9</code></li>
<li><code>board[i].length == 9</code></li>
<li><code>board[i][j]</code> 是一位数字（<code>1-9</code>）或者 <code>&#39;.&#39;</code></li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看题目可知，有效的数独是指每行/每列/每个3*3的方格，均无重复元素出现。所以，答题也按这个思路去做即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Boolean&gt;[][] maps = <span class="keyword">new</span> HashMap[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            Map&lt;Character, Boolean&gt; rowMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;Character, Boolean&gt; columnMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[i].length; j++) &#123;</span><br><span class="line">                <span class="comment">//检测行</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    Boolean exists = rowMap.put(board[i][j], <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != exists) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检测列</span></span><br><span class="line">                <span class="keyword">if</span>(board[j][i] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    Boolean exists = columnMap.put(board[j][i], <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != exists) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检测矩阵</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>( <span class="keyword">null</span> == maps[i/<span class="number">3</span>][j/<span class="number">3</span>] )&#123;</span><br><span class="line">                        maps[i/<span class="number">3</span>][j/<span class="number">3</span>] = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Boolean exists = maps[i/<span class="number">3</span>][j/<span class="number">3</span>].put(board[i][j], <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != exists) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rowMap.clear();</span><br><span class="line">            columnMap.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>题目转载自：<a href="https://leetcode-cn.com/problems/valid-sudoku">https://leetcode-cn.com/problems/valid-sudoku</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>十分钟学习一个日常定位bug技巧之Arthas工具</title>
    <url>/2021/09/06/%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%97%A5%E5%B8%B8%E5%AE%9A%E4%BD%8Dbug%E6%8A%80%E5%B7%A7%E4%B9%8BArthas%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote class="blockquote-center-cus">
<div style="text-align:center;">你独处的能力，决定了你的人生高度</div><div style="text-align:center">你定位BUG的能力，决定了你的薪资高度</div><div style="text-align:right;padding-right:20px;">-收录于《胡说八道全集》    </div>
</blockquote>


<p>平常编码工作中，我们会常遇到如下场景：本地运行没问题，但测试环境就是运行异常，棘手的是，看日志一切都是正常的。</p>
<p>遇到这种情况，常见的做法是到测试环境把class文件拉回本地反编译，比对测试环境代码是否部署有问题。</p>
<p>如果代码没问题，则添加打印参数的日志，再重新部署，再复现。这种方法可以解决问题，但一系列的操作，还是太费时间。</p>
<p>这里介绍一个工具<code>Arthas</code>，它可以直接在运行中的服务把JVM中的class字节码反编译，修改反编译后的代码，再直接重新发布到JVM中，整个过程，不用重启服务。</p>
<span id="more"></span>

<p>下面介绍整个过程，目录如下：</p>
<ol>
<li>运行Arthas</li>
<li>反编译class字节码</li>
<li>修改代码</li>
<li>发布到JVM</li>
</ol>
<p>以Arthas官网的Demo为例：</p>
<p>下载Arthas：<a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p>
<p>运行Demo程序，<code>java -jar math-game.jar</code>。这是一个每隔一秒通过Random获取随机数，然后做质因数分解，并打印出分解结果的小程序</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/01.png"></p>
<p>运行Arthas，<code>java -jar arthas-boot.jar</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/02.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/02.png"></p>
<p>运行后，arthas会打印出当前所有的Java进程，根据中括号中的ID选择要处理的进程。如，输入1，然后按ENTER</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/03.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/03.png"></p>
<p>这时候，arthas已经attach上前面运行的math-game程序。main_class也显示了该程序的主类</p>
<p>我们以这个demo.MathGame为例，反编译它<code>jad demo.MathGame</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/04.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/04.png"></p>
<p>如上图，可见反编译后的main函数为一个死循环，每隔一秒运行一次run函数。</p>
<p>我们把反编译后的代码存到本地<code>jad demo.MathGame --source-only --lineNumber false &gt; MathGame.java</code>，这样，在运行arthas的目录下就生成了MathGame.java文件。</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/05.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/05.png"></p>
<p>我们编辑它，在它run函数中加一个打印语句<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/06.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/06.png"></p>
<p>加了代码后，我们可以自己用javac工具编译，也可以用arthas提供mc(Memory Compiler/内存编译器)工具编译</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/07.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/07.png"></p>
<p>如上，编译得到MathGame.class字节码文件，下面则是通过arthas的redefine命令发布到JVM中</p>
<p>发布前，我们再次确认，当前MathGame运行的结果是</p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/08.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/08.png"></p>
<p>没有执行我们加入的代码<code>System.out.println(&quot;动态加的代码，打印number值为：&quot; + number)</code></p>
<p>执行<code>redefine /Users/creasylai/program/arthas-bin/demo/MathGame.class</code></p>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/09.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/09.png"></p>
<p>再观察MathGame运行的结果 </p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/10.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/10.png"></p>
<p>这时候，我们加入的代码就已经执行了。</p>
<hr>
<p>其他：</p>
<ol>
<li><p>其实arthas提供了watch命令，可以直接观察方法执行的入参、返回值等，在上方的场景，我们没必要加打印语句了</p>
<p>执行命令<code>watch demo.MathGame primeFactors &quot;&#123;params,returnObj&#125;&quot; -x 2&quot;</code></p>
</li>
</ol>
<p> <img src="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/11.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/20210906/article1/11.png"></p>
<p>如上图，入参和返回值都打印出来了(返回值为null是因为p rimeFactors方法抛出异常了)</p>
<ol start="2">
<li>arthas还有很多有用的命令，如trace可以追踪每个函数的执行耗时，dashboard可以查看程序的运行状态等</li>
</ol>
<p>下方链接为arthas在线教程</p>
<p>基础教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-basics</a></p>
<p>进阶教程【十分钟】<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced">https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&amp;id=arthas-advanced</a></p>
<p>参考文档：<a href="https://arthas.aliyun.com/zh-cn/">https://arthas.aliyun.com/zh-cn/</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Bug</tag>
        <tag>Arthas</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>可转债</title>
    <url>/2021/09/14/%E5%8F%AF%E8%BD%AC%E5%80%BA/</url>
    <content><![CDATA[<p>本篇为可转债的入门文章，主要以<a href="https://xueqiu.com/S/SH113050">南银转债(SH:113050)</a>为例，介绍可转债的相关概念。</p>
<span id="more"></span>

<p>首先附上南银转债相关的发行公告(资料来源：<a href="http://www.sse.com.cn/disclosure/listedinfo/announcement/">上海证券交易所</a>)</p>
<ul>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8B%9F%E9%9B%86%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">20210610_南京银行股份有限公司公开发行A股可转换公司债券募集说明书</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8B%9F%E9%9B%86%E8%AF%B4%E6%98%8E%E4%B9%A6%E6%91%98%E8%A6%81.pdf">20210610_南京银行股份有限公司公开发行A股可转换公司债券募集说明书摘要</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E4%BF%A1%E7%94%A8%E8%AF%84%E7%BA%A7%E6%8A%A5%E5%91%8A.pdf">20210610_南京银行股份有限公司公开发行A股可转换公司债券信用评级报告</a></p>
</li>
</ul>
<ul>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210610_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8F%91%E8%A1%8C%E5%85%AC%E5%91%8A.pdf">20210610_南京银行股份有限公司公开发行可转换公司债券发行公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210616_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E7%BD%91%E4%B8%8A%E4%B8%AD%E7%AD%BE%E7%8E%87%E5%8F%8A%E7%BD%91%E4%B8%8B%E9%85%8D%E5%94%AE%E7%BB%93%E6%9E%9C%E5%85%AC%E5%91%8A.pdf">20210616_南京银行股份有限公司公开发行可转换公司债券网上中签率及网下配售结果公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210617_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E7%BD%91%E4%B8%8A%E4%B8%AD%E7%AD%BE%E7%BB%93%E6%9E%9C%E5%85%AC%E5%91%8A.pdf">20210617_南京银行股份有限公司公开发行可转换公司债券网上中签结果公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210621_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8C%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8F%91%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%85%AC%E5%91%8A.pdf">20210621_南京银行股份有限公司公开发行可转换公司债券发行结果公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210629_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E4%B8%8A%E5%B8%82%E5%85%AC%E5%91%8A%E4%B9%A6.pdf">20210629_南京银行股份有限公司公开发行A股可转换公司债券上市公告书</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210629_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%B3%E4%BA%8E%E7%AD%BE%E7%BD%B2%E5%85%AC%E5%BC%80%E5%8F%91%E8%A1%8CA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B8%E5%8B%9F%E9%9B%86%E8%B5%84%E9%87%91%E4%B8%93%E6%88%B7%E5%AD%98%E5%82%A8%E7%9B%91%E7%AE%A1%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%85%AC%E5%91%8A.pdf">20210629_南京银行股份有限公司关于签署公开发行A股可转换公司债券募集资金专户存储监管协议的公告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210703_2021%E5%B9%B4%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E8%B7%9F%E8%B8%AA%E8%AF%84%E7%BA%A7%E6%8A%A5%E5%91%8A.pdf">20210703_2021年南京银行股份有限公司跟踪评级报告</a></p>
</li>
<li><p><a href="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/0914/article1/20210703_%E5%8D%97%E4%BA%AC%E9%93%B6%E8%A1%8C%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E5%85%B3%E4%BA%8EA%E8%82%A1%E5%8F%AF%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%8F%B8%E5%80%BA%E5%88%B82021%E5%B9%B4%E8%B7%9F%E8%B8%AA%E8%AF%84%E7%BA%A7%E7%BB%93%E6%9E%9C%E7%9A%84%E5%85%AC%E5%91%8A.pdf">20210703_南京银行股份有限公司关于A股可转换公司债券2021年跟踪评级结果的公告</a></p>
</li>
</ul>
<h3 id="可转债"><a href="#可转债" class="headerlink" title="可转债"></a>可转债</h3><blockquote>
<p><strong>可转换债券</strong>（Convertible Bond，CB），简称<strong>可转债</strong>，又作<strong>可换股债券</strong>，是一种混合债券及<a href="https://zh.wikipedia.org/wiki/%E9%87%91%E8%9E%8D%E8%A1%8D%E7%94%9F%E5%93%81">金融衍生品</a>可按一定规则转换为债券发行公司的<a href="https://zh.wikipedia.org/wiki/%E8%82%A1%E7%A5%A8">股票</a>；其转换价格、转换时间段会在发行前确定。由于附加了认股权证（<a href="https://zh.wikipedia.org/wiki/%E6%9C%9F%E6%9D%83">期权</a>）等多种权益，可转换债券通常<a href="https://zh.wikipedia.org/w/index.php?title=%E7%A5%A8%E9%9D%A2%E5%88%A9%E7%8E%87&action=edit&redlink=1">票面利率</a>较一般企业债券低。从发行者的角度看，用可转换债券融资的主要优势在于可以减少<a href="https://zh.wikipedia.org/wiki/%E5%88%A9%E6%81%AF">利息</a>费用，增加股权融资，降低负债率，但如果债券被转换，公司原股东的股权将被<a href="https://zh.wikipedia.org/w/index.php?title=%E8%82%A1%E6%9D%83%E7%A8%80%E9%87%8A&action=edit&redlink=1">稀释</a>。</p>
</blockquote>
<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h4 id="提高中签概率"><a href="#提高中签概率" class="headerlink" title="提高中签概率"></a>提高中签概率</h4>]]></content>
      <categories>
        <category>投资</category>
      </categories>
      <tags>
        <tag>可转债</tag>
        <tag>理财</tag>
        <tag>低风险</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode423-从英文中重建数字</title>
    <url>/2021/11/24/LeetCode423/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串 <code>s</code> ，其中包含字母顺序打乱的用英文单词表示的若干数字（<code>0-9</code>）。按 <strong>升序</strong> 返回原始的数字。</p>
 <span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;owoztneoer&quot;</span><br><span class="line">输出：&quot;012&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;fviefuro&quot;</span><br><span class="line">输出：&quot;45&quot;</span><br></pre></td></tr></table></figure>



<p>提示：</p>
<ul>
<li>1 &lt;= s.length &lt;= 105</li>
<li>s[i] 为 [“e”,”g”,”f”,”i”,”h”,”o”,”n”,”s”,”r”,”u”,”t”,”w”,”v”,”x”,”z”] 这些字符之一</li>
<li>s 保证是一个符合题目要求的字符串</li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看完题目后，大概猜出可能需要每个数字的特定字母做标识，所以干脆列出0-9数字的英文单词观察</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZERO = <span class="string">&quot;zero&quot;</span>;<span class="comment">//Z</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ONE = <span class="string">&quot;one&quot;</span>;<span class="comment">//Z,W,U-&gt;O</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TWO = <span class="string">&quot;two&quot;</span>;<span class="comment">//W</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String THREE = <span class="string">&quot;three&quot;</span>;<span class="comment">//Z,U-&gt;R</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FOUR = <span class="string">&quot;four&quot;</span>;<span class="comment">//U</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIVE = <span class="string">&quot;five&quot;</span>;<span class="comment">//U-&gt;F</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIX = <span class="string">&quot;six&quot;</span>;<span class="comment">//X</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEVEN = <span class="string">&quot;seven&quot;</span>;<span class="comment">//X-&gt;S</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EIGHT = <span class="string">&quot;eight&quot;</span>;<span class="comment">//G</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NINE = <span class="string">&quot;nine&quot;</span>;<span class="comment">//G,X,U-&gt;F-&gt;I</span></span><br></pre></td></tr></table></figure>

<p>如上，观察后得出，可以分三轮，计算出每个数字的出现次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一轮，选出zero,two,four,six,eight</span></span><br><span class="line"><span class="comment">//第二轮，选出one,three,five,seven</span></span><br><span class="line"><span class="comment">//第三轮，选出nine</span></span><br></pre></td></tr></table></figure>

<p>得出方法后，代码就很容易写了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">originalDigits</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先把s做分解，用Map&lt;Character, Integer&gt;做容器</span></span><br><span class="line">        Map&lt;Character, Integer&gt; wordCount = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>( wordCount.containsKey(c) )&#123;</span><br><span class="line">                wordCount.put(c, wordCount.get(c)+<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wordCount.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//第一轮</span></span><br><span class="line">        numCount[<span class="number">0</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;z&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">2</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;w&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">4</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;u&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">6</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;x&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        numCount[<span class="number">8</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;g&#x27;</span>)).orElse(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//第二轮</span></span><br><span class="line">        numCount[<span class="number">1</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;o&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">0</span>]-numCount[<span class="number">2</span>]-numCount[<span class="number">4</span>];</span><br><span class="line">        numCount[<span class="number">3</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;r&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">0</span>]-numCount[<span class="number">4</span>];</span><br><span class="line">        numCount[<span class="number">5</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;f&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">4</span>];</span><br><span class="line">        numCount[<span class="number">7</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;s&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">6</span>];</span><br><span class="line">        <span class="comment">//第三轮</span></span><br><span class="line">        numCount[<span class="number">9</span>] = Optional.ofNullable(wordCount.get(<span class="string">&#x27;i&#x27;</span>)).orElse(<span class="number">0</span>)-numCount[<span class="number">5</span>]-numCount[<span class="number">6</span>]-numCount[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCount.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numCount[i]; j++) &#123;</span><br><span class="line">                sb.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article2/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1124/article2/01.png"></p>
<p>题目转载自：<a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english">https://leetcode-cn.com/problems/reconstruct-original-digits-from-english</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode38-外观数列</title>
    <url>/2021/12/01/LeetCode38-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个正整数<code> n</code> ，输出外观数列的第 <code>n</code> 项。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>
<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>
<ul>
<li><p><code>countAndSay(1) = &quot;1&quot;</code></p>
</li>
<li><p><code>countAndSay(n)</code> 是对<code> countAndSay(n-1)</code> 的描述，然后转换成另一个数字字符串。</p>
</li>
</ul>
 <span id="more"></span>

<p>前五项如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">第一项是数字 1 </span><br><span class="line">描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 &quot;11&quot;</span><br><span class="line">描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 &quot;21&quot;</span><br><span class="line">描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 &quot;1211&quot;</span><br><span class="line">描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 &quot;111221&quot;</span><br></pre></td></tr></table></figure>

<p>要 <strong>描述</strong>  一个数字字符串，首先要将字符串分割为 <strong>最小</strong> 数量的组，每个组都由连续的最多 <strong>相同字符</strong> 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p>
<p>例如，数字字符串<code> &quot;3322251&quot;</code> 的描述如下图：</p>
<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/00.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/00.png"></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：&quot;1&quot;</span><br><span class="line">解释：这是一个基本样例。</span><br></pre></td></tr></table></figure>


<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：&quot;1211&quot;</span><br><span class="line">解释：</span><br><span class="line">countAndSay(1) = &quot;1&quot;</span><br><span class="line">countAndSay(2) = 读 &quot;1&quot; = 一 个 1 = &quot;11&quot;</span><br><span class="line">countAndSay(3) = 读 &quot;11&quot; = 二 个 1 = &quot;21&quot;</span><br><span class="line">countAndSay(4) = 读 &quot;21&quot; = 一 个 2 + 一 个 1 = &quot;12&quot; + &quot;11&quot; = &quot;1211&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 30</code></li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>看完题目后，觉得用顺推的思路比较容易。我们可以依次算出第1个、第2个、第3个…第n-1个外观数列，则第n个外观数列也容易算出</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> loop = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( loop &lt; n )&#123;</span><br><span class="line">            loop++;</span><br><span class="line">            str = getNextStr(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNextStr</span><span class="params">(String input)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> start = input.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( input.charAt(i) != start )&#123;</span><br><span class="line">                sb.append(count);</span><br><span class="line">                sb.append(start);</span><br><span class="line">                start = input.charAt(i);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(count);</span><br><span class="line">        sb.append(start);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/01.png" alt="https://gitee.com/creasylai19/blog.images/raw/master/img/2021/1201/article01/01.png"></p>
<p>题目转载自：<a href="https://leetcode-cn.com/problems/count-and-say">https://leetcode-cn.com/problems/count-and-say</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
